[{"path":"https://gilead-biostats.github.io/gsm.core/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2024 Gilead Sciences  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Contributor Guidelines","text":"page outlines development process {gsm} packages, including contribute filing issues, bug reports, submitting code via Pull Request.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"prerequisites","dir":"Articles","previous_headings":"Introduction","what":"Prerequisites","title":"Contributor Guidelines","text":"contributing code via Pull Request, make sure file issue using one pre-specified issue templates. Choose template best categorizes aim contribute, generally can one following: Bugfix Issue: Fix bug code Feature Issue: Develop new feature QC Issue: Update QC framework, including documentation, qualification, automation, etc. Business Requirement: Create parent issue Business Requirement (Gilead Team ) Someone development team decide issue scope. , issue appropriately triaged assigned core developer, approval submit Pull Request associated submitted issue granted. decided issue scope otherwise irrelevant, issue closed. issue templates provide comments/prompts help ensure relevant information included. submitting issues bug fixes specific feature requests, often helpful provide minimal reprex, reproducible example, help core developers visualize issue. Suggestions input might warrant formal submission issue can filed discussions, can help facilitate discourse specific use-cases requests.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"branches","dir":"Articles","previous_headings":"Introduction","what":"Branches","title":"Contributor Guidelines","text":"core branches used repository : main: Contains production version package. dev: Contains development version package. fix: Used develop new functionality package. See Development Process details. release: Used conduct regression testing finalize QC documentation release. See Release Process details.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"development-process","dir":"Articles","previous_headings":"","what":"Development Process","title":"Contributor Guidelines","text":"code development takes place fix branches. section provides general guidance process flow. detailed step--step workflow code development fix branches can found first section Appendix 1 . issue filed delegated core developer, fix branch opened, package development related issue conducted. fix branch linked one filed GitHub issue(s). issue(s) referenced naming fix branch. example, branch named fix-111 addresses issue #111. Tasks related documentation, testing, /qualification may also use fix branches associated issues. addition , please also use following general guidelines creating Pull Request: New code generally follow tidyverse style guide, automatic styling applied release. details style guide can found . Documentation included, using roxygen2 package. New functions changes existing functions include updated unit tests demonstrate branch compatibility. Core developers request unit tests developed using testthat >= v3.0.0. Please include relevant details provide context proposed updates new functionality. Additionally, link Pull Request relevant issue(s) using either closing keywords, Development section sidebar Pull Request page. general, Pull Requests target dev branch (exception release Pull Request). checks tests must passing merging Pull Request dev. checks automatically run via GitHub Actions, described Appendix 3, can also run locally calling devtools::check() fix branch finalizing Pull Request.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"release-process","dir":"Articles","previous_headings":"","what":"Release Process","title":"Contributor Guidelines","text":"Code release follows process using release branches. release initiated feature development, QC, qualification completed given functionality. primary objective Release Workflow conduct regression testing finalize QC documentation release. detailed step--step workflow code release can found second section Appendix 1 .","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"style-guide","dir":"Articles","previous_headings":"","what":"Style Guide","title":"Contributor Guidelines","text":"Code developers {gsm} packages use tidyverse style guide minimal modifications. code run standardize styling release:","code":"double_indent_style <- styler::tidyverse_style() double_indent_style$indention$unindent_fun_dec <- NULL double_indent_style$indention$update_indention_ref_fun_dec <- NULL double_indent_style$line_break$remove_line_breaks_in_fun_dec <- NULL styler::style_dir('R', transformers = double_indent_style) styler::style_dir('tests', recursive = TRUE, transformers = double_indent_style)"},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"fix-branch-workflow","dir":"Articles","previous_headings":"Appendix 1 - Detailed Workflows","what":"fix Branch Workflow","title":"Contributor Guidelines","text":"Bugfix Issue Feature Issue QC Issue Assign issue(s) core developer(s). Assign milestone within issue(s). Developer creates fix branch (nomenclature reflecting associated issue(s)) updates associated code(s). Assign Pull Request self. Requests review(s). Assign milestone. Link associated issue(s). approved assigned code reviewer(s). Pass GitHub qualification checks. fix branch merged dev branch requirements fulfilled. user merges fix branch make sure delete upon merging.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"release-branch-workflow","dir":"Articles","previous_headings":"Appendix 1 - Detailed Workflows","what":"release Branch Workflow","title":"Contributor Guidelines","text":"release branch named according version package released (e.g., release-v1.2.0) using semantic versioning. release branch already created, make sure synced current dev branch. Confirm version DESCRIPTION file date. Run styler using script style guide commit updates. Update NEWS.md summary revisions/additions release. Keep information previous releases maintain traceability versions. Ensure qualification specifications spreadsheet {gsm.qc} package --date accurate. changes/updates qualification tests, reach qualification developer update necessary files. applicable, review README.md relevant vignettes make sure updates accurately described. Ensure unit tests passing. Check qualification tests passing new features added need qualified. updates needed, outlined release QC issue resolved prior release. Run devtools::spell_check() resolve findings. Build site using pkgdown::build_site(). Check examples displayed correctly new functions occur Reference page. Open clean R session. Run devtools::install() devtools::check() locally confirm issues/conflicts. Use release Pull Request template adding ?template=release.md URL creating Pull Request. user can also click link, click Raw, copy/paste displayed Markdown Pull Request. Assign Pull Request self. Request QC review(s). Assign milestone. Complete Risk Assessments Assessment/Feature added outlined Pull Request template. Create comments Pull Request unique QC checklist selected Assessment/Feature (See example v0.1.0). Completing QC checklists Pull Request. Ensuring GitHub Actions Pull Request main branch passing. QC Reviewer(s) file issues development team follow standard package development process using fix branches. issues resolved merged dev branch, Release Owner can merge dev branch release branch, re-request review. needed, original Pull Request can closed new release Pull Request can created Release Candidate (RC) value added branch name (e.g., release-v1.2.0-RC2) Merge release Pull Request main branch. Create GitHub release targeting main branch using wording NEWS.md, addition automatically generated content GitHub. Confirm QC Report attached release. Create Pull Request merge main branch dev branch sync updates made release process. Check issues associated current release closed. Update milestone incomplete tasks. Delete code branches associated previous releases. Close milestone project associated previous release.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"appendix-2---qc-checklist","dir":"Articles","previous_headings":"","what":"Appendix 2 - QC Checklist","title":"Contributor Guidelines","text":"QC checklist used part Development Release Workflows described . applied Assessment/Feature, confirm function meets requirements described. applied utility functionality, use relevant sections checklist modify QC checks needed. risk-based approach used determine whether release requires high-level detailed release QC.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"high-level-qc-checklist","dir":"Articles","previous_headings":"Appendix 2 - QC Checklist","what":"High-Level QC Checklist","title":"Contributor Guidelines","text":"New functionality contains @export tag. New functionality contains adequate level documentation. New functionality associated unit test(s). Tests confirm input data required columns (). Tests confirm output data expected columns/structure. Tests confirm intended functionality parameter. Running Make_Snapshot() using defaults returns errors. Running CheckSnapshotInputs() using output Make_Snapshot()$lSnapshot returns errors. Running Study_Assess() using defaults returns errors. Running Study_Report() using output Study_Assess() produces HTML report accurately displays results. Assessment User Requirements + Qualification tests captured using qualification framework. QC report generated expected checks pass successfully. Code well commented easy read/understand. Qualification specifications spreadsheet (qualification_specs.csv) reviewed approved qualification developer. file paths company-specific data present. devtools::check() passes errors/warnings/notes. Package documents date, running devtools::document() change files. Codes use tidyverse best practices standard data manipulation. unclear, reviewer start discussion thread. new dependencies add significant value. unclear, reviewer start discussion thread. GitHub Actions run errors.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"detailed-qc-checklist","dir":"Articles","previous_headings":"Appendix 2 - QC Checklist","what":"Detailed QC Checklist","title":"Contributor Guidelines","text":"Function name captured roxygen2 title (e.g., “Adverse Event Assessment”) Assessment purpose captured roxygen2 description (e.g., “Evaluates adverse event (AE) rates identify sites may - -reporting AEs”) Input data requirements captured dedicated roxygen2 details section Data specification (#' @section Data specification, # Data specification storing data specification .md file). Statistical methods assumptions captured dedicated roxygen2 details section Statistical assumptions (#' @section Statistical assumptions, # Statistical assumptions storing statistical assumptions .md file). section link relevant Analyze_ function(s) details. function parameters described @param tag. parameter description include name, type, purpose, usage details, default value (applicable), requirement, valid options (applicable). external dependencies captured. Use @importFrom _package_ _function_ importing five (5) fewer functions, @import _package_ otherwise. Function output captured @return tag. output description include output type, structure, data specification (applicable). least one (1) example provided @examples tag. Basic checks parameters included using stopifnot() similar logic (e.g., stopifnot(\"dfInput data frame\" = .data.frame(dfInput))) Tests confirm stopifnot() parameter checks working expected. Tests confirm input data required columns (). Tests confirm output data expected columns/structure. Tests confirm intended functionality parameter. Tests confirm missing data required columns handled appropriately errors/warnings produced needed. Assessment User Requirements + Qualification tests captured using qualification framework. QC report generated expected checks pass successfully. Code well commented easy read/understand. Qualification specifications spreadsheet (qualification_specs.csv) reviewed approved qualification developer. file paths company-specific data present. Function called non-tidyverse dependencies called via ::. devtools::check() passes errors/warnings/notes. Package documents date, running devtools::document() change files. Codes use tidyverse best practices standard data manipulation. unclear, reviewer start discussion thread. new dependencies add significant value. unclear, reviewer start discussion thread. GitHub Actions run errors.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"github-action-workflow","dir":"Articles","previous_headings":"","what":"Appendix 3 - Continuous Integration with GitHub Actions","title":"Contributor Guidelines","text":"GitHub Actions used {gsm} packages automate processes ensure code documentation created consistently documented thoroughly.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"merges-to-dev-branch","dir":"Articles","previous_headings":"Appendix 3 - Continuous Integration with GitHub Actions","what":"Merges to dev Branch","title":"Contributor Guidelines","text":"Basic R CMD check can run using devtools::check() Provides additional check ability build pkgdown reference index ensure functions documented correctly. check run ubuntu-latest R version 4.1.3. Builds Assessment Specification tables function documentation Outputs added man/.md changes committed compare branch triggering Pull Request. Uses covr check package coverage. Generates pkgdown site based branch merged dev.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/ContributorGuidelines.html","id":"merges-to-main-branch","dir":"Articles","previous_headings":"Appendix 3 - Continuous Integration with GitHub Actions","what":"Merges to main Branch","title":"Contributor Guidelines","text":"Basic R CMD check can run using rcmdcheck::rcmdcheck() Provides additional check ability build pkgdown reference index ensure functions documented correctly. check also run qualification tests ensure release fully qualified. check run ubuntu-latest R version 4.1.3. Additionally, run latest R release version windows-latest, macOS-latest, ubuntu-latest. Builds pkgdown site relevant package (gsm.core case). Builds qualification vignette attached artifact release tagged Pull Request name via GHA dispatch {gsm.qc}. reviewed Pull Request Owner completeness correctness ensure artifact added release correct.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/Cookbook.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Cookbook","text":"vignette contains sample code showing use Good Statistical Monitoring {gsm} suite packages using sample data gsm.core. information {gsm} suite packages see package homepage.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/Cookbook.html","id":"setup-and-installation","dir":"Articles","previous_headings":"","what":"Setup and Installation","title":"Cookbook","text":"Run following:","code":"## Install devtools install.packages('devtools')  ## Install and load gsm devtools::install_github(\"Gilead-BioStats/gsm.core\", ref = \"main\") library(gsm.core)  ## Install and load gsm.mapping devtools::install_github(\"Gilead-BioStats/gsm.mapping\", ref = \"main\") library(gsm.mapping)  ## Install and load gsm.kri devtools::install_github(\"Gilead-BioStats/gsm.kri\", ref = \"main\") library(gsm.kri)  ## Install and load gsm.reporting devtools::install_github(\"Gilead-BioStats/gsm.reporting\", ref = \"main\") library(gsm.kri)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/Cookbook.html","id":"example-1---adverse-events-metric---scripted","dir":"Articles","previous_headings":"","what":"Example 1 - Adverse Events Metric - Scripted","title":"Cookbook","text":"example uses standard {gsm} analysis workflows creates site-level Adverse Event scripts. See Data Analysis Vignette detail. Example 1.1 calculates Site-level AE rates. Example 1.2 adds filter include Serious Adverse Events (SAEs) implements pipes run workflow. Example 1.3 generates bar charts showing SAE rates z-scores study using {gsm.kri}. Example 1.4 generates scatter plot confidence bound SAE rates using {gsm.kri}.","code":"#### Example 1.1 - Generate an Adverse Event Metric using the standard {gsm.core} workflow  dfInput <- Input_Rate(   dfSubjects= gsm.core::lSource$Raw_SUBJ,   dfNumerator= gsm.core::lSource$Raw_AE,   dfDenominator = gsm.core::lSource$Raw_SUBJ,   strSubjectCol = \"subjid\",   strGroupCol = \"invid\",   strNumeratorMethod= \"Count\",   strDenominatorMethod= \"Sum\",   strDenominatorCol= \"timeonstudy\" )  dfTransformed <- Transform_Rate(dfInput) dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = \"rate\") dfFlagged <- Flag_NormalApprox(dfAnalyzed, vThreshold = c(-3,-2,2,3)) dfSummarized <- Summarize(dfFlagged)  table(dfSummarized$Flag)  #### Example 1.2 - Make an SAE Metric by adding a filter.  Also works with pipes.  SAE_KRI <- Input_Rate(   dfSubjects= gsm.core::lSource$Raw_SUBJ,   dfNumerator= gsm.core::lSource$Raw_AE %>% filter(aeser==\"Y\"),   dfDenominator = gsm.core::lSource$Raw_SUBJ,   strSubjectCol = \"subjid\",   strGroupCol = \"invid\",   strNumeratorMethod= \"Count\",   strDenominatorMethod= \"Sum\",   strDenominatorCol= \"timeonstudy\" ) %>%   Transform_Rate %>%   Analyze_NormalApprox(strType = \"rate\") %>%   Flag_NormalApprox(vThreshold = c(-3,-2,2,3)) %>%   Summarize  table(SAE_KRI$Flag)  ### Example 1.3 - Visualize Metric distribution using Bar Charts using provided htmlwidgets library(gsm.kri)  labels <- list(   Metric= \"Serious Adverse Event Rate\",   Numerator= \"Serious Adverse Events\",   Denominator= \"Days on Study\" )  gsm.kri::Widget_BarChart(dfResults = SAE_KRI, lMetric=labels, strOutcome=\"Metric\") gsm.kri::Widget_BarChart(dfResults = SAE_KRI, lMetric=labels, strOutcome=\"Score\") gsm.kri::Widget_BarChart(dfResults = SAE_KRI, lMetric=labels, strOutcome=\"Numerator\")  ### Example 1.4 - Create Scatter plot with confidence bounds dfBounds <- Analyze_NormalApprox_PredictBounds(SAE_KRI, vThreshold = c(-3,-2,2,3)) gsm.kri::Widget_ScatterPlot(SAE_KRI, lMetric = labels, dfBounds = dfBounds)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/Cookbook.html","id":"example-2---adverse-events-metrics---workflow","dir":"Articles","previous_headings":"","what":"Example 2 - Adverse Events Metrics - Workflow","title":"Cookbook","text":"examples introduces YAML workflows re-generate results Example 1 via reusable pipeline. See Data Model Vignette detail. Example 2.1 runs AE KRI workflow. Example 2.2 updates metadata run country-level metrics. Example 2.3 adds filtering step workflow generate SAE metric.","code":"library(gsm.mapping) library(gsm.kri)  #### Example 2.1 - Configurable Adverse Event Workflow  # Define YAML workflow AE_workflow <- read_yaml(text= 'meta:   Type: Analysis   ID: kri0001   GroupLevel: Site   Abbreviation: AE   Metric: Adverse Event Rate   Numerator: Adverse Events   Denominator: Days on Study   Model: Normal Approximation   Score: Adjusted Z-Score   AnalysisType: rate   Threshold: -2,-1,2,3   AccrualThreshold: 30   AccrualMetric: Denominator spec:   Mapped_AE:     subjid:       type: character   Mapped_SUBJ:     subjid:       type: character     invid:       type: character     timeonstudy:       type: integer steps:   - output: vThreshold     name: ParseThreshold     params:       strThreshold: Threshold   - output: Analysis_Input     name: Input_Rate     params:       dfSubjects: Mapped_SUBJ       dfNumerator: Mapped_AE       dfDenominator: Mapped_SUBJ       strSubjectCol: subjid       strGroupCol: invid       strGroupLevel: GroupLevel       strNumeratorMethod: Count       strDenominatorMethod: Sum       strDenominatorCol: timeonstudy   - output: Analysis_Transformed     name: Transform_Rate     params:       dfInput: Analysis_Input   - output: Analysis_Analyzed     name: Analyze_NormalApprox     params:       dfTransformed: Analysis_Transformed       strType: AnalysisType   - output: Analysis_Flagged     name: Flag_NormalApprox     params:       dfAnalyzed: Analysis_Analyzed       vThreshold: vThreshold       nAccrualThreshold: AccrualThreshold       strAccrualMetric: AccrualMetric   - output: Analysis_Summary     name: Summarize     params:       dfFlagged: Analysis_Flagged   - output: lAnalysis     name: list     params:       ID: ID       Analysis_Input: Analysis_Input       Analysis_Transformed: Analysis_Transformed       Analysis_Analyzed: Analysis_Analyzed       Analysis_Flagged: Analysis_Flagged       Analysis_Summary: Analysis_Summary ')  # Run the workflow lMappingWorkflows <- MakeWorkflowList(   strNames = c(\"AE\", \"SUBJ\"),   strPath = \"workflow/1_mappings\",   strPackage = \"gsm.mapping\",   bExact = TRUE ) mappings_spec <- gsm.mapping::CombineSpecs(lMappingWorkflows) lRawData <- gsm.mapping::Ingest(gsm.core::lSource, mappings_spec) AE_data <-list(   Mapped_SUBJ= lRawData$Raw_SUBJ,   Mapped_AE= lRawData$Raw_AE ) AE_KRI <- RunWorkflow(lWorkflow = AE_workflow, lData = AE_data)  # Create Barchart from workflow Widget_BarChart(dfResults = AE_KRI$Analysis_Summary)  #### Example 2.2 - Run Country-Level Metric AE_country_workflow <- AE_workflow AE_country_workflow$meta$GroupLevel <- \"Country\" AE_country_workflow$steps[[2]]$params$strGroupCol <- \"country\"  AE_country_KRI <- RunWorkflow(lWorkflow = AE_country_workflow, lData = AE_data) gsm.kri::Widget_BarChart(dfResults = AE_country_KRI$Analysis_Summary, lMetric = AE_country_workflow$meta)  #### Example 2.3 - Create SAE workflow  # Tweak AE workflow metadata SAE_workflow <- AE_workflow SAE_workflow$meta$File <- \"SAE_KRI\" SAE_workflow$meta$Metric <- \"Serious Adverse Event Rate\" SAE_workflow$meta$Numerator <- \"Serious Adverse Events\"  # Add a step to filter out non-serious AEs `RunQuery` filterStep <- list(list(   name = \"RunQuery\",   output = \"Mapped_AE\",   params= list(     df= \"Mapped_AE\",     strQuery = \"SELECT * FROM df WHERE aeser = 'Y'\"   )) ) SAE_workflow$steps <- SAE_workflow$steps %>% append(filterStep, after=0)  # Run the updated workflow SAE_KRI <- RunWorkflow(lWorkflow = SAE_workflow, lData = AE_data ) gsm.kri::Widget_BarChart(dfResults = SAE_KRI$Analysis_Summary, lMetric = SAE_workflow$meta)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/Cookbook.html","id":"example-3---study-level-reporting-workflows","dir":"Articles","previous_headings":"","what":"Example 3 - Study-Level Reporting Workflows","title":"Cookbook","text":"example extends previous examples generate charts reports multiple KRIs. See Data Reporting Vignette detail. Example 3.1 steps several workflows generate report 12 standard site-level KRIs. Example 3.2 automates data ingestion using gsm.mapping::Ingest() gsm.mapping::CombineSpecs(). Example 3.3 generates report using {gsm.kri} incorporating multiple timepoints using sample reporting data saved part gsm.core.","code":"library(gsm.core) library(gsm.mapping) library(gsm.kri) library(gsm.reporting) library(dplyr)  #### 3.1 - Create a KRI Report using 13 standard metrics in a step-by-step workflow  core_mappings <- c(\"AE\", \"COUNTRY\", \"DATACHG\", \"DATAENT\", \"ENROLL\", \"LB\", \"PK\",                    \"PD\", \"QUERY\", \"STUDY\", \"STUDCOMP\", \"SDRGCOMP\", \"SITE\", \"SUBJ\")  # Step 0 - Create Raw Data from Source Data lRaw <- list(   Raw_SUBJ = gsm.core::lSource$Raw_SUBJ,   Raw_AE = gsm.core::lSource$Raw_AE,   Raw_PD = gsm.core::lSource$Raw_PD %>%     rename(subjid = subjectenrollmentnumber),   Raw_PK = gsm.core::lSource$Raw_PK %>%     rename(visit = foldername),   Raw_LB = gsm.core::lSource$Raw_LB,   Raw_STUDCOMP = gsm.core::lSource$Raw_STUDCOMP %>%     select(subjid, compyn),   Raw_SDRGCOMP = gsm.core::lSource$Raw_SDRGCOMP,   Raw_DATACHG = gsm.core::lSource$Raw_DATACHG %>%     rename(subject_nsv = subjectname),   Raw_DATAENT = gsm.core::lSource$Raw_DATAENT %>%     rename(subject_nsv = subjectname),   Raw_QUERY = gsm.core::lSource$Raw_QUERY %>%     rename(subject_nsv = subjectname),   Raw_ENROLL = gsm.core::lSource$Raw_ENROLL,   Raw_SITE = gsm.core::lSource$Raw_SITE %>%     rename(studyid = protocol) %>%     rename(invid = pi_number) %>%     rename(InvestigatorFirstName = pi_first_name) %>%     rename(InvestigatorLastName = pi_last_name) %>%     rename(City = city) %>%     rename(State = state) %>%     rename(Country = country) %>%     rename(Status = site_status),   Raw_STUDY = gsm.core::lSource$Raw_STUDY %>%     rename(studyid = protocol_number) %>%     rename(Status = status),   Raw_VISIT = gsm.core::lSource$Raw_VISIT %>%     mutate(visit_folder = foldername) %>%     rename(visit = foldername) )  # Step 1 - Create Mapped Data Layer - filter, aggregate and join raw data to create mapped data layer mappings_wf <- gsm.core::MakeWorkflowList(strNames = core_mappings, strPath = \"workflow/1_mappings\", strPackage = \"gsm.mapping\") mapped <- gsm.core::RunWorkflows(mappings_wf, lRaw)  # Step 2 - Create Metrics - calculate metrics using mapped data metrics_wf <- gsm.core::MakeWorkflowList(strPath = \"workflow/2_metrics\", strPackage = \"gsm.kri\") analyzed <- gsm.core::RunWorkflows(metrics_wf, mapped)  # Step 3 - Create Reporting Layer - create reports using metrics data reporting_wf <- gsm.core::MakeWorkflowList(strPath = \"workflow/3_reporting\", strPackage = \"gsm.reporting\") reporting <- gsm.core::RunWorkflows(reporting_wf, c(mapped, list(lAnalyzed = analyzed,                                                        lWorkflows = metrics_wf)))  # Step 4 - Create KRI Reports - create KRI report using reporting data module_wf <- gsm.core::MakeWorkflowList(strPath = \"workflow/4_modules\", strPackage = \"gsm.kri\") lReports <- gsm.core::RunWorkflows(module_wf, reporting)  #### 3.2 - Automate data ingestion using Ingest() and CombineSpecs() # Step 0 - Data Ingestion - standardize tables/columns names mappings_wf <- gsm.core::MakeWorkflowList(strNames = core_mappings, strPath = \"workflow/1_mappings\", strPackage = \"gsm.mapping\") mappings_spec <- gsm.mapping::CombineSpecs(mappings_wf) lRaw <- gsm.mapping::Ingest(gsm.core::lSource, mappings_spec)  # Step 1 - Create Mapped Data Layer - filter, aggregate and join raw data to create mapped data layer mapped <- gsm.core::RunWorkflows(mappings_wf, lRaw)  # Step 2 - Create Metrics - calculate metrics using mapped data metrics_wf <- gsm.core::MakeWorkflowList(strPath = \"workflow/2_metrics\", strPackage = \"gsm.kri\") analyzed <- gsm.core::RunWorkflows(metrics_wf, mapped)  # Step 3 - Create Reporting Layer - create reports using metrics data reporting_wf <- gsm.core::MakeWorkflowList(strPath = \"workflow/3_reporting\", strPackage = \"gsm.reporting\") reporting <- gsm.core::RunWorkflows(reporting_wf, c(mapped, list(lAnalyzed = analyzed,                                                        lWorkflows = metrics_wf)))  # Step 4 - Create KRI Report - create KRI report using reporting data module_wf <- gsm.core::MakeWorkflowList(strPath = \"workflow/4_modules\", strPackage = \"gsm.kri\") lReports <- gsm.core::RunWorkflows(module_wf, reporting)   #### 3.3 Site-Level KRI Report with multiple SnapshotDate # Below relies on the clindata stuff, do we need to rerun/rewrite reporting datasets? lCharts <- gsm.kri::MakeCharts(   dfResults = gsm.core::reportingResults,   dfGroups = gsm.core::reportingGroups,   dfMetrics = gsm.core::reportingMetrics,   dfBounds = gsm.core::reportingBounds )  kri_report_path <- gsm.kri::Report_KRI(   lCharts = lCharts,   dfResults =  gsm.kri::FilterByLatestSnapshotDate(reportingResults),   dfGroups =  gsm.core::reportingGroups,   dfMetrics = gsm.core::reportingMetrics )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Step-by-Step Analysis Workflow","text":"vignette walks users mechanics functions produce Analysis workflow output within gsm.core package. suite {gsm} packages leverages Key Risk Indicators (KRIs) thresholds conduct study-level site-level Risk Based Monitoring clinical trials. functions provide data frames, visualizations, metadata used reporting error checking clinical sites. image illustrates supporting functions feed yaml workflow specified analysis workflow.  functions run automatically sequentially user calls upon RunWorkflow() function specified yaml file KRI metrics found workflow/2_metrics directory {gsm.kri} package. individual functions can also run independently outside specified yaml workflow. purposes documentation, evaluate input(s) output(s) individual function specific KRI show stepwise progression yaml workflow set handle process data.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"case-study---step-by-step-adverse-event-kri","dir":"Articles","previous_headings":"Introduction","what":"Case Study - Step-by-Step Adverse Event KRI","title":"Step-by-Step Analysis Workflow","text":"use sample clinical data simulated {gsm.datasim} package run Adverse Events (AE) Assessment, .e., AE_Assess(), using normal approximation method. Additional statistical methods supporting functions explored Appendix 1.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"create-dfinput","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Adverse Event KRI","what":"1. Create dfInput","title":"Step-by-Step Analysis Workflow","text":"Start creating dfInput using sample rawplus data created {gsm.datasim}. Note Input_Rate() requires three specific clinical datasets, include subject-level demographics/exposure dataset (dfSubjects) domain-level dataset (dfNumerator) records every adverse event per subject. Since Input_Rate() generalized function, also required specify relevant column names Subject (strSubjectCol), Group (strGroupCol) optionally Denominator (strDenominatorCol) Numerator (strNumeratorCol) simply “Denominator” “Numerator”, respectively. Finally, method calculating Numerator Denominator specified strNumeratorMethod strDenominatorMethod either “Count” “Sum”. method “Count”, function simply counts number rows provided data frame. numerator method “Sum”, function takes sum values specified column (strNumeratorCol strDenominatorCol). data frame dfInput AE assessment created running Input_Rate() one record per subject, following columns: SubjectID: Subject Identifier GroupID: Group Identifier GroupLevel: Type Group specified GroupID (Country, Site) Numerator: Total Time Treatment (measured days; per subject) Denominator: Total Number Event(s) Interest (example, number AEs reported; per subject) Metric: Rate Event Incidence (calculated Exposure/Count; per subject)","code":"dfInput <- Input_Rate(               dfSubjects = gsm.core::lSource$Raw_SUBJ,               dfNumerator = gsm.core::lSource$Raw_AE,               dfDenominator = gsm.core::lSource$Raw_SUBJ,               strSubjectCol = \"subjid\",               strGroupCol = \"invid\",               strNumeratorMethod = \"Count\",               strDenominatorMethod = \"Sum\",               strDenominatorCol = \"timeonstudy\" )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"create-dftransformed","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Adverse Event KRI","what":"2. Create dfTransformed","title":"Step-by-Step Analysis Workflow","text":"data frame dfTransformed derived dfInput using Transform() function. example, analysis pipeline pulls Transform_Rate() since default metric AEs number AEs reported course treatment per site, .e., rate. resulting dfTransformed data frame contain site-level transformed data, including KRI calculation. Using example AE data, dfTransformed contains following columns: GroupID: Group Identifier (default Site ID) GroupLevel: Type Group specified GroupID (Country, Site) Numerator: Cumulative Number Event(s) Interest (example, number AEs reported across subjects) Denominator: Cumulative Time Treatment (days, across subjects) Metric: Rate Event(s) Interest (example, number AEs reported course treatment days)","code":"dfTransformed <- Transform_Rate(dfInput)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"create-dfanalyzed","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Adverse Event KRI","what":"3. Create dfAnalyzed","title":"Step-by-Step Analysis Workflow","text":"data frame dfAnalyzed derived dfTransformed using Analyze() function, incorporates specific statistical model. resulting dfAnalyzed data frame contain site-level analysis results data. normal approximation method default statistical model AE data, analysis pipeline automatically runs Analyze_NormalApprox(). Using example AE data, dfAnalyzed contains following columns: GroupID: Group Identifier (default Site ID) GroupLevel: Type Group specified GroupID (Country, Site) Numerator: Cumulative Number Event(s) Interest (example, number AEs reported across subjects); Carried dfTransformed. Denominator: Cumulative Time Treatment (days, across subjects); Carried dfTransformed. Metric: Rate Event(s) Interest (example, number AEs reported course treatment days); Carried dfTransformed. OverallMetric: Aggregate metric group assessed. ( sum(Numerator) / sum(Denominator) ). Factor: Calculated -dispersion adjustment factor (mean z-score sum squares calculated analysis functions). Score: Calculated Residual (per site).","code":"dfAnalyzed <- Analyze_NormalApprox(dfTransformed) #> `OverallMetric`, `Factor`, and `Score` columns created from normal #> approximation."},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"create-dfflagged","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Adverse Event KRI","what":"4. Create dfFlagged","title":"Step-by-Step Analysis Workflow","text":"data frame dfFlagged derived dfAnalyzed using Flag() function. resulting dfFlagged data frame contain site-level analysis results data flagging incorporated based pre-specified statistical threshold highlight possible outliers. default flagging function normal approximation method Flag() default threshold (-3, -2, 2, 3). Using example AE data, dfFlagged contains following columns: GroupID: Group Identifier (default Site ID) GroupLevel: Type Group specified GroupID (Country, Site) Numerator: Cumulative Number Event(s) Interest (example, number AEs reported across subjects); Carried dfAnalyzed Denominator: Cumulative Time Treatment (days, across subjects); Carried dfAnalyzed Metric: Rate Event(s) Interest (example, number AEs reported course treatment days); Carried dfAnalyzed OverallMetric: Aggregate metric group assessed. ( sum(Numerator) / sum(Denominator) ). Factor: Calculated -dispersion adjustment factor (mean z-score sum squares calculated analysis functions); Carried dfAnalyzed. Score: Calculated Residual (per site); Carried dfAnalyzed Flag: Flag Indicating Possible Statistical Outliers; Valid values variable include -2, -1, 0, 1, 2, determine “extremeness” outlier. -2 2 represent extreme outliers, -1 1 represent less extreme outliers, 0 represents non-outlier.","code":"dfFlagged <- Flag(dfAnalyzed, vThreshold = c(-3, -2, 2, 3)) #> ℹ Sorted dfFlagged using custom Flag order: 2.Sorted dfFlagged using custom Flag order: -2.Sorted dfFlagged using custom Flag order: 1.Sorted dfFlagged using custom Flag order: -1.Sorted dfFlagged using custom Flag order: 0."},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"create-dfsummary","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Adverse Event KRI","what":"5. Create dfSummary","title":"Step-by-Step Analysis Workflow","text":"data frame dfSummary derived dfFlagged using Summarize() function. resulting dfSummary data frame contain relevant columns dfFlagged data sorted meaningful way provide concise overview assessment. Flagged sites sort earlier non-flagged sites, “extreme” outliers displayed first. columns dfSummary include: GroupID: Group Identifier (default Site ID) GroupLevel: Type Group specified GroupID (Country, Site) Numerator: Cumulative Number Event(s) Interest (example, number AEs reported across subjects); Carried dfAnalyzed Denominator: Cumulative Time Treatment (days, across subjects); Carried dfAnalyzed Metric: Rate Event(s) Interest (example, number AEs reported course treatment days) Score: Calculated Residual (per site) Flag: Flag Indicating Possible Statistical Outliers; Valid values variable include -2, -1, 0, 1, 2, determine “extremeness” outlier. -2 2 represent extreme outliers, -1 1 represent less extreme outliers, 0 represents non-outlier.","code":"dfSummary <- Summarize(dfFlagged)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"recap---normal-approximation-adverse-event-kri","dir":"Articles","previous_headings":"","what":"Recap - Normal Approximation Adverse Event KRI","title":"Step-by-Step Analysis Workflow","text":"dfInput used original input using Input_Rate() dfTransformed created dfInput using Transform_Rate() dfAnalyzed created dfTransformed using Analyze_NormalApprox() dfFlagged created dfAnalyzed using Flag_NormalApprox() dfSummary created dfFlagged using Summarize()","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"appendix-1","dir":"Articles","previous_headings":"","what":"Appendix 1 - Supporting Functions","title":"Step-by-Step Analysis Workflow","text":"following sections include various examples supporting functions statistical models can employed Analysis workflow. Please note exhaustive list, includes commonly called upon functions.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"mapping-functions","dir":"Articles","previous_headings":"Appendix 1 - Supporting Functions","what":"Mapping Functions","title":"Step-by-Step Analysis Workflow","text":"RunQuery(): Run SQL query create new data.frames filtering column name specifications. Input_Rate(): Calculate subject level rate raw numerator denominator data","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"transform-functions","dir":"Articles","previous_headings":"Appendix 1 - Supporting Functions","what":"Transform Functions","title":"Step-by-Step Analysis Workflow","text":"Transform_Rate(): Calculates cumulative rate Event(s) Interest per site Transform_Count(): Calculates cumulative number Event(s) Interest per site","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"analyze-functions","dir":"Articles","previous_headings":"Appendix 1 - Supporting Functions","what":"Analyze Functions","title":"Step-by-Step Analysis Workflow","text":"Analyze_NormalApprox(): Uses funnel plot method normal approximation create analysis results percentage/rate. Analyze_Fisher(): Uses Fisher’s Exact Test determine non-random associations site given KRI Analyze_Identity(): Used data pipeline Transform() Flag() functions rename KRI Score columns Analyze_Poisson(): Uses Poisson model describe distribution events overall site population, .e., determine many times event likely occur site specified treatment period","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"flag-functions","dir":"Articles","previous_headings":"Appendix 1 - Supporting Functions","what":"Flag Functions","title":"Step-by-Step Analysis Workflow","text":"Flag(): Default flagging function assessments Flag_NormalApprox(): Deprecated flagging function Analyze_NormalApprox() used assessment. Flag_Poisson(): Deprecated flagging function Analyze_Poisson() used assessment","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataAnalysis.html","id":"what-statistical-models-are-available-for-each-assessment","dir":"Articles","previous_headings":"Appendix 1 - Supporting Functions","what":"What Statistical Models Are Available For Each Assessment?","title":"Step-by-Step Analysis Workflow","text":"default, yaml workflow assessments specified inst/workflow/ directory {gsm.kri} package use normal approximation method. Optionally, statistical methods include: Poisson, Fisher’s Exact, Identity.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data Model","text":"{gsm} suite packages provides standardized data pipeline conducting study-level Risk Based Quality Management (RBQM) clinical trials. four main types data used {gsm} suite packages: Raw Data - Clinical operational data study databases Mapped Data - Data transformed standardized analysis Analysis Data - Data analyzed calculate Key Risk Indicators (KRIs) Reporting Data - Data summarized formatted reporting vignette provides high-level overview type data used, includes detailed data specifications appendices.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"data-model-overview","dir":"Articles","previous_headings":"","what":"Data Model Overview","title":"Data Model","text":"general, {gsm} suite packages designed flexible customizable, allowing users build custom data pipelines support many types raw study data. shown , raw clinical data transformed mapped data, analyzed calculate desired metrics. analysis data combined formatted reporting additional raw data, including CTMS data {gsm.mapping} workflow data, provides relevant metadata reports.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"raw-and-mapped-data","dir":"Articles","previous_headings":"","what":"Raw and Mapped Data","title":"Data Model","text":"{gsm} suite packages designed work wide variety clinical data sources. raw data used analysis pipeline typically sourced clinical trial databases transformed mapped data using simple transformations. Mapped data used input analysis pipeline. single data standard raw mapped data {gsm.mapping}. requirement mapped data compatible analytics pipeline. Data Mapping transformations can done using multiple methods including custom R scripts (e.g., dplyr), SQL queries, using gsm.mapping workflows (e.g. system.file(\"workflow/1_mapping/AE.yaml\", package = \"gsm.mapping\") file). Examples methods can found vignette(\"Cookbook\").","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"analysis-data","dir":"Articles","previous_headings":"","what":"Analysis Data","title":"Data Model","text":"{gsm.kri} analysis data used capture key metrics associated conduct clinical trial. described {gsm.kri} readme, 12 standard Key Risk Indicator (KRI) metrics included package along automated workflows allow run sites countries study. Examples KRIs include rate adverse events amount missing data site across sites. Defining deploying KRIs continually monitor risks integrity trial take corrective actions accordingly.  image provides overview default KRI analysis pipeline. pipeline standardized five-step process assessing data issues going participant-level input data standardized site-level summary model results. functions used step data pipeline along input output datasets described detail . dfInput: Input data; Cross-domain participant-level input data needed data KRI derivation. Created Input_Rate() function used mapped data input. dfTransformed: Transformed data; Site-level transformed data including KRI calculation. Created Transform_*() functions using dfInput input. dfAnalyzed: Analyzed data; Site-level analysis results data. Created Analyze_*() functions using dfTransformed input. dfFlagged: Flagged data; Site-level analysis results flags added indicate potential statistical outliers. Created passing numeric thresholds Flag_*() function using dfAnalyzed input. dfSummary: Summary data; Standardized subset flagged data. summary data structure assessments always includes KRI Flag values user can easily look trends given site across multiple assessments. Created using Summarize() function using dfFlagged input. data requirements component analysis pipeline rigid; See Appendix 1 full specifications.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"analysis-workflows","dir":"Articles","previous_headings":"Analysis Data","what":"Analysis Workflows","title":"Data Model","text":"Since rigid data requirements component analysis data model, analysis workflow largely standardized. two main approaches running analysis workflow: Scripted Analysis: Run step analysis pipeline individually using functions provided {gsm} suite packages. approach useful understanding data requirements debugging. See Example 1 vignette(\"Cookbook\") example approach. Workflow Analysis: Run analysis pipeline using YAML workflow file. approach useful running analysis multiple studies automating analysis process. See Example 2 vignette(\"Cookbook\") example approach. Note step workflows can customized based requirements specific KRI. graphic shows four workflows.  details analysis data pipelines can found vignette(\"DataAnalysis\").","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"reporting-data","dir":"Articles","previous_headings":"","what":"Reporting Data","title":"Data Model","text":"rigid Reporting Data framework provided {gsm.reporting} allow standardized reporting, visualization meta-analysis compare risk profiles across timepoints, even across multiple studies. Reporting Data sets used {gsm.reporting} {gsm.kri} : Reporting_Results: Summary data; Standardized subset flagged data. summary data structure assessments always includes KRI Flag values user can easily look trends given site across multiple assessments. Created using Summarize() function analytics pipeline, followed BindResults() function add columns necessary reporting stack metrics snapshots single data.frame. Reporting_Bounds: Bounded data; data.frame containing predicted boundary values upper lower bounds across range observed values. Created MakeBounds() function. Reporting_Groups: Grouped data; Long data.frame summarized group CTMS data site, study, country level counts metrics. Constructed binding data.frames created MakeLongMeta(). Reporting_Metrics: Metric metadata; Metric-specific metadata use charts reporting. Created passing lWorkflow object MakeMetric() function. Similar Analysis Workflows, reporting data pipelines can run R scripts YAML workflows. Example 3 cookbook vignette shows populate Reporting Data tables using output Analysis Workflows study data sources. Reporting Deep Dive Vignette provides details Reporting Data model.","code":""},{"path":[]},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"analytics-data-model","dir":"Articles","previous_headings":"","what":"Analytics data model","title":"Data Model","text":"KRI analytics pipeline standardized process Analyzing data issues going participant-level input data standardized site-level summary model results. data sets used step data pipeline described detail . using metric workflow YAML create tables, data tables contained list, call lAnalysis. list fed reporting data pipeline.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"analysis_input","dir":"Articles","previous_headings":"Analytics data model > Analysis Data Tables","what":"Analysis_Input","title":"Data Model","text":"gsm.core::Input_Rate() Analysis_Subjects Analysis_Numerator Analysis_Denominator Usage: base data.frame Analysis workflows. Feeds Transform_*() functions. Structure:","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"analysis_transformed","dir":"Articles","previous_headings":"Analytics data model > Analysis Data Tables","what":"Analysis_Transformed","title":"Data Model","text":"gsm.core::Transform_Rate() gsm.core::Transform_Count() Inputs: Analysis_Input Usage: Convert input data format needed format derive KRI Assessment via Analyze_*() functions. Structure:","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"analysis_analyzed","dir":"Articles","previous_headings":"Analytics data model > Analysis Data Tables","what":"Analysis_Analyzed","title":"Data Model","text":"gsm.core::Analyze_Fisher() gsm.core::Analyze_Identity() gsm.core::Analyze_NormalApprox() gsm.core::Analyze_Poisson() Inputs: Analysis_Transformed Usage: Prepare data Flag_*() performing specified test metric provided. Structure:","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"analysis_flagged","dir":"Articles","previous_headings":"Analytics data model > Analysis Data Tables","what":"Analysis_Flagged","title":"Data Model","text":"gsm.core::Flag() Inputs: Analysis_Analyzed Usage: Flag group-level metric summarized via gsm.core::Summarize() used reporting. Structure:","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"analysis_summary","dir":"Articles","previous_headings":"Analytics data model > Analysis Data Tables","what":"Analysis_Summary","title":"Data Model","text":"gsm.core::Summarize() Inputs: Analysis_Flagged Usage: Summarize KRI group level reporting. Structure:","code":""},{"path":[]},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"reporting_results","dir":"Articles","previous_headings":"Overview of Reporting data model > Reporting Data Tables","what":"Reporting_Results","title":"Data Model","text":"gsm.reporting::BindResults() Inputs: lAnalysis, strStudyID, dSnapshotDate Workflow used create table: 3_reporting/Results.yaml {gsm.reporting} Usage: Summarize KRI group level reporting. Structure:","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"reporting_bounds","dir":"Articles","previous_headings":"Overview of Reporting data model > Reporting Data Tables","what":"Reporting_Bounds","title":"Data Model","text":"gsm.reporting::MakeBounds() gsm.core::Analyze_NormalApprox_PredictBounds() (called within gsm.reporting::MakeBounds()) Inputs: lAnalysis, strStudyID, dSnapshotDate Workflow used create table: 3_reporting/Bounds.yaml {gsm.reporting} Usage: Calculates predicted percentages/rates upper- lower-bounds across full range sample sizes/total exposure values reporting. Structure:","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"reporting_groups","dir":"Articles","previous_headings":"Overview of Reporting data model > Reporting Data Tables","what":"Reporting_Groups","title":"Data Model","text":"gsm.reporting::MakeLongMeta() dplyr::bind_rows() Inputs: CTMS site, study country data Workflow used create table: 3_reporting/Groups.yaml {gsm.reporting} Usage: Group-level metadata dictionary. Structure: Long data frame, certain Param required given GroupLevel Expected Param GroupLevel use gsm reporting. User may add Param values needed.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"reporting_metrics","dir":"Articles","previous_headings":"Overview of Reporting data model > Reporting Data Tables","what":"Reporting_Metrics","title":"Data Model","text":"Function used create table: gsm.reporting::MakeMetric() Inputs: lWorkflows - metadata corresponding kri(s) made gsm.core::MakeWorkflowList() Workflow used create table: 3_reporting/Metrics.yaml {gsm.reporting} Usage: Metadata used charts tables Structure:","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/DataModel.html","id":"appendix-2---analysis-workflow-specifications","dir":"Articles","previous_headings":"Overview of Reporting data model","what":"Appendix 2 - Analysis Workflow Specifications","title":"Data Model","text":"Assessment workflow metadata objects passed lWorkflow parameter RunWorkflow() define functions parameters across multiple studies. lWorkflow object named list metadata steps defining assessment run. default, gsm.core::MakeWorkflowList() imports YAML specifications workflow/2_metrics {gsm.kri}. item lWorkflow expects following parameters steps section: workflow[]$meta: specifies metadata information KRI. workflow[]$steps$name: name {gsm} function. workflow[]$steps$inputs: specifies required input data workflow[]$steps$output: specifies output data workflow step, can used input next step workflow workflow[]$steps$params: specifies parameters passed function example, default workflow AE assessment (system.file(\"workflow/2_metrics/kri0001.yaml\", package = \"gsm.kri\")) shown :","code":"meta:   Type: Analysis   ID: kri0001   GroupLevel: Site   Abbreviation: AE   Metric: Adverse Event Rate   Numerator: Adverse Events   Denominator: Days on Study   Model: Normal Approximation   Score: Adjusted Z-Score   AnalysisType: rate   Threshold: -2,-1,2,3   AccrualThreshold: 30   AccrualMetric: Denominator spec:   Mapped_AE:     subjid:       type: character   Mapped_SUBJ:     subjid:       type: character     invid:       type: character     timeonstudy:       type: integer steps:   - output: vThreshold     name: gsm.core::ParseThreshold     params:       strThreshold: Threshold   - output: Analysis_Input     name: gsm.core::Input_Rate     params:       dfSubjects: Mapped_SUBJ       dfNumerator: Mapped_AE       dfDenominator: Mapped_SUBJ       strSubjectCol: subjid       strGroupCol: invid       strGroupLevel: GroupLevel       strNumeratorMethod: Count       strDenominatorMethod: Sum       strDenominatorCol: timeonstudy   - output: Analysis_Transformed     name: gsm.core::Transform_Rate     params:       dfInput: Analysis_Input   - output: Analysis_Analyzed     name: Analyze_NormalApprox     params:       dfTransformed: Analysis_Transformed       strType: AnalysisType   - output: Analysis_Flagged     name: gsm.core::Flag_NormalApprox     params:       dfAnalyzed: Analysis_Analyzed       vThreshold: vThreshold       nAccrualThreshold: AccrualThreshold       strAccrualMetric: AccrualMetric   - output: Analysis_Summary     name: gsm.core::Summarize     params:       dfFlagged: Analysis_Flagged   - output: lAnalysis     name: list     params:       ID: ID       Analysis_Input: Analysis_Input       Analysis_Transformed: Analysis_Transformed       Analysis_Analyzed: Analysis_Analyzed       Analysis_Flagged: Analysis_Flagged       Analysis_Summary: Analysis_Summary"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"KRI Method","text":"vignette outlines statistical methods used evaluate Key Risk Indicators (KRIs) {gsm} suite packages. KRIs metrics allow users measure pre-defined risks determine level observed risk data quality patient safety clinical trial. {gsm} suite packages implements standardized data pipeline facilitate KRI analysis. vignettes provide overview framework (1 2, 3, 4), statistical methods process described detail . gsm.core calculates KRIs defining numerator denominator metric. default, gsm.core calculates z-scores using normal approximation adjustment -dispersion assign risk levels. KRIs percentages (binary outcome), numerator # events denominator # total participants, apply normal approximation binomial distribution determine risk level. KRIs rates (count outcome), numerator # events denominator total participant exposure study duration, apply normal approximation Poisson distribution determine risk level. Alternative statistical methods calculate standardized scores also available gsm.core, including Identity, Fisher Poisson methods. details provided .","code":""},{"path":[]},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"introduction","dir":"Articles","previous_headings":"Statistical Methods > 1. The Normal Approximation Method","what":"Introduction","title":"KRI Method","text":"method applies normal approximation binomial distribution binary outcome KRIs, normal approximation Poisson distribution rate outcome KRIs (sample sizes total exposure sites) assess data quality safety. control limits based asymptotic normal approximation constructed risk thresholds identifying site-level risks. Reference: Zink, Richard C., Anastasia Dmitrienko, Alex Dmitrienko. Rethinking clinically based thresholds TransCelerate BioPharma risk-based monitoring. Therapeutic Innovation & Regulatory Science 52, . 5 (2018): 560-571.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"binary","dir":"Articles","previous_headings":"Statistical Methods > 1. The Normal Approximation Method > Methods","what":"Binary","title":"KRI Method","text":"Consider problem monitoring KRIs binary outcomes, protocol deviation discontinuation study, across multiple sites clinical trial. Assume mm sites nin_i patients ii th site, =1,2,…,mi = 1, 2, \\dots, m. Denote total number patients study n=∑=1mnin=\\sum_{=1}^m n_i. Let XijX_{ij} signify outcome interest jj th patient ii th site, Xij=1X_{ij}=1 indicates event occurred indicates event occurred. Finally, let pip_i denote site-level proportion ii th site. Monitoring tools focus testing null hypothesis consistency true site-level proportion across multiple sites. Specifically, null hypothesis states site-level proportion binary outcome constant across sites, , H0:p1=…=pm=pH_0: p_1 = \\dots = p_m = p, pp common proportion. common proportion can estimated p̂=1n∑=1m∑j=1niXij\\hat{p} = \\frac{1}{n}\\sum_{=1}^m\\sum_{j=1}^{n_i}X_{ij}. control limits computed using confidence limits based asymptotic normal approximation. 95% confidence interval obtained significance level α=0.05\\alpha=0.05. Let Xi=∑j=1niXijX_i=\\sum_{j=1}^{n_i}X_{ij} represent total number events occur let p̂=Xi/ni\\hat{p}_i=X_i/n_i denote estimated event rate ii th site. asymptotic 100(1–α)100(1 – \\alpha)% confidence interval pip_i given p̂−z1−α/2p̂(1−p̂)ni≤pi≤p̂+z1−α/2p̂(1−p̂)ni \\hat{p}_i-z_{1-\\alpha/2}\\sqrt{\\frac{\\hat{p}_i(1-\\hat{p}_i)}{n_i}} \\leq p_i \\leq \\hat{p}_i+z_{1-\\alpha/2}\\sqrt{\\frac{\\hat{p}_i(1-\\hat{p}_i)}{n_i}}  z1−α/2z_{1-\\alpha/2} upper percentile standard normal distribution. construct control limits observed event rate site, estimated event rate forced equal overall event rate p̂\\hat{p}_i. means lower (l) upper (u) asymptotic control limits ii th site defined li=p̂−z1−α/2p̂(1−p̂)nil_i=\\hat{p}-z_{1-\\alpha/2}\\sqrt{\\frac{\\hat{p}(1-\\hat{p})}{n_i}} ui=p̂+z1−α/2p̂(1−p̂)niu_i=\\hat{p}+z_{1-\\alpha/2}\\sqrt{\\frac{\\hat{p}(1-\\hat{p})}{n_i}}, respectively. Asymptotic control limits may reliable smaller clinical trials, exact limits event rate may preferable.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"rate","dir":"Articles","previous_headings":"Statistical Methods > 1. The Normal Approximation Method > Methods","what":"Rate","title":"KRI Method","text":"Assume distribution number events time TT Poisson mean λt\\lambda t, λ\\lambda event rate given unit time. ii th site Xi=∑j=1NiXijX_i=\\sum_{j=1}^{N_i}X_{ij} events Ti=∑j=1NitijT_i=\\sum_{j=1}^{N_i}t_{ij} exposure, define exposure-adjusted incidence rate (EAIR) λ̂=XiTi\\hat{\\lambda}_i=\\frac{X_i}{T_i}. sites, define X=∑=1mXiX=\\sum_{=1}^{m}X_{} T=∑=1mtiT=\\sum_{=1}^{m}t_{} λ̂=XT\\hat{\\lambda}=\\frac{X}{T}. normal approximation, 100(1–)100(1 – )% confidence interval ii th site λ̂−z1−α/2λ̂iTi≤pi≤λ̂+z1−α/2λ̂iTi \\hat{\\lambda}_i-z_{1-\\alpha/2}\\sqrt{\\frac{\\hat{\\lambda}_i}{T_i}} \\leq p_i \\leq \\hat{\\lambda}_i+z_{1-\\alpha/2}\\sqrt{\\frac{\\hat{\\lambda}_i}{T_i}} . funnel plots accounting exposure, x-axis representing site sample size (nn) examples replaced total exposure time TT. develop funnel plot, fix λ̂=λ̂\\hat{\\lambda}_i=\\hat{\\lambda}, vary TT min(Ti)min(T_i) max(Ti)max(T_i) compute control limits. area future research, work Chan Wang (2009) may suggest methods appropriate computing exact confidence interval EAIR. Finally, similar methods can applied count-type endpoint XijX_{ij}, tij denote time study jj th patient ii th site.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"kri-metric-and-z-score","dir":"Articles","previous_headings":"Statistical Methods > 1. The Normal Approximation Method","what":"KRI Metric and Z-score","title":"KRI Method","text":"KRI metric along KRI score created site measure level observed risk data quality patient safety clinical trial. scoring purposes, Z-scores normal approximation calculated defined : zi=yi−θ0V(Y|θ0)z_i=\\frac{y_i-\\theta_0}{\\sqrt{V(Y|\\theta_0)}} site ii, yiy_i KRI metric calculated site ii, θ0\\theta_0 overall mean, V(Y|θ0)\\sqrt{V(Y|\\theta_0)} measurement variance. binary outcome, V(Y|θ0)=p̂(1−p̂)ni\\sqrt{V(Y|\\theta_0)}=\\sqrt{\\frac{\\hat{p}(1-\\hat{p})}{n_i}}. rate outcome, V(Y|θ0)=λ̂Ti\\sqrt{V(Y|\\theta_0)}=\\sqrt{\\frac{\\hat{\\lambda}}{T_i}}.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"over-dispersion-adjustment","dir":"Articles","previous_headings":"Statistical Methods > 1. The Normal Approximation Method","what":"Over-dispersion adjustment","title":"KRI Method","text":"standard normal approximation method described assumes null distribution fully expresses variability sites -control, many situations assumption hold. situation presence greater variability expected, majority sites fall outside specified limits, leading double appropriateness constructed limits. way handling issue allow -dispersion normal approximation. multiplicative -dispersion adjustment implemented approach. Suppose sample mm units -control, -dispersion factor ϕ\\phi can estimated mean squared z-scores, .e., ϕ̂=1m∑=1mzi2\\hat\\phi = \\frac{1}{m}\\sum_{=1}^m z_i^2. binary outcome, -dispersion adjusted variance V′(Yi|ϕ,p)=ϕp(1−p)niV'(Y_i|\\phi, p)=\\phi\\frac{{p}(1-p)}{n_i}. rate outcome, -dispersion adjusted variance V′(Yi|ϕ,λ)=ϕλTiV'(Y_i|\\phi, \\lambda)=\\phi\\frac{\\lambda}{T_i}. Therefore, -dispersion adjustment, adjusted z-scores site ii zi=p̂−p̂ϕ̂p̂(1−p̂)niz_i = \\frac{\\hat{p}_i - \\hat{p}}{\\sqrt{\\hat\\phi \\frac{{\\hat{p}}(1-\\hat{p})}{n_i}}}, zi=λ̂−λ̂ϕ̂λ̂Tiz_i = \\frac{\\hat{\\lambda}_i - \\hat{\\lambda}}{\\sqrt{\\hat\\phi \\frac{\\hat\\lambda}{T_i}}}, respectively. Reference: Spiegelhalter, David J. Funnel plots comparing institutional performance. Statistics medicine 24.8 (2005): 1185-1202.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"estimate-and-score","dir":"Articles","previous_headings":"Statistical Methods > 1. The Normal Approximation Method","what":"Estimate and Score","title":"KRI Method","text":"function Analyze_NormalApprox() gsm.core calculates adjusted z-score site discussed . adjusted z-scores used scoring metric gsm.core flag possible outliers using thresholds discussed .","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"threshold","dir":"Articles","previous_headings":"Statistical Methods > 1. The Normal Approximation Method","what":"Threshold","title":"KRI Method","text":"default, sites adjusted z-score exceeding ±2\\pm 2 ±3\\pm 3 normal approximation analysis flagged amber red, respectively. thresholds set common choices corresponding 95.6% 99.7% data around mean standard normal distribution. However, fully configurable package can customized specified gsm.core functions.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"special-situations","dir":"Articles","previous_headings":"Statistical Methods > 1. The Normal Approximation Method","what":"Special Situations","title":"KRI Method","text":"Results interpretable appropriate apply asymptotic method: don’t want flag certain situations results interpretable appropriate apply asymptotic method due small sample sizes. default threshold minimum denominator requirement 30 days exposure 3 patients site level.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"recommendation","dir":"Articles","previous_headings":"Statistical Methods > 1. The Normal Approximation Method","what":"Recommendation","title":"KRI Method","text":"Normal approximation method can used scenarios binary rate KRIs.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"the-identity-method","dir":"Articles","previous_headings":"Statistical Methods","what":"2. The Identity Method","title":"KRI Method","text":"Identity method simply uses count event numerator KRI metric score. thresholds monitoring site risk set based actual counts.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"introduction-1","dir":"Articles","previous_headings":"Statistical Methods > 3. The Fisher’s Exact Method","what":"Introduction","title":"KRI Method","text":"binary outcome KRIs, optional method gsm.core implemented Fisher’s exact test. Fisher’s exact test statistical significance test used analysis contingency tables nominal variables want find proportions one variable different among values variables. contrast large-sample based asymptotic statistics rely approximation, Fisher’s exact test can applied sample sizes small. function Analyze_Fisher gsm.core utilizes stats::fisher.test generate estimate odds ratio well p-value using Fisher’s exact test site-level count data. site, Fisher’s exact test conducted comparing sites combined 2×2 contingency table. p-values used scoring metric gsm.core flag possible outliers. default stats::fisher.test uses two-sided test (equivalent testing null = 1) compute p-values Monte Carlo simulation unless simulate.p.value = TRUE. Sites p-values less 0.05 Fisher’s exact test analysis flagged default. significance level set common choice.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"methods-1","dir":"Articles","previous_headings":"Statistical Methods > 3. The Fisher’s Exact Method","what":"Methods","title":"KRI Method","text":"example, 2×22 \\times 2 contingency table comparing particular site sites combined, two rows displaying binary outcome considered repeated Bernoulli random samples probability p=0.5p=0.5 success failure null. Given 2×22 \\times 2 contingency table, Fisher (1922) showed conditional margins table, aa distributed hypergeometric distribution +ca+c draws population +ba+b successes c+dc+d failures. Let n=+b+c+dn=+b+c+d, probability obtaining set values given : p=(+ba)(c+dc)(na+c)=(+bb)(c+dd)(nb+d)=(+b)!(c+d)!(+c)!(b+d)!!b!c!d!n!. p=\\frac{{{+b} \\choose } {{c+d} \\choose c}}{{n \\choose {+c}}}=\\frac{{{+b} \\choose b} {{c+d} \\choose d}}{{n \\choose {b+d}}}=\\frac{(+b)!(c+d)!(+c)!(b+d)!}{! b! c! d! n!}.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"estimate-and-score-1","dir":"Articles","previous_headings":"Statistical Methods > 3. The Fisher’s Exact Method","what":"Estimate and Score","title":"KRI Method","text":"function Analyze_Fisher() gsm.core utilizes stats::fisher.test() generate estimate odds ratio well p-value using Fisher’s exact test site-level count data. site, Fisher’s exact test conducted comparing sites combined 2×22 \\times 2 contingency table. p-values used scoring metric gsm.core flag possible outliers using thresholds discussed . default stats::fisher.test() uses two-sided test (equivalent testing null: =1) compute p-values Monte Carlo simulation unless simulate.p.value = TRUE specified.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"threshold-1","dir":"Articles","previous_headings":"Statistical Methods > 3. The Fisher’s Exact Method","what":"Threshold","title":"KRI Method","text":"default, sites p-values less 0.05 0.01 Fisher’s exact test analysis flagged amber red, respectively. thresholds set based empirical p-value approach, use distribution p-values find best separation data identify sites risk. default thresholds set common choices significance levels. However, fully configurable package can customized specified gsm.core functions.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"the-fishers-exact-test-assumptions","dir":"Articles","previous_headings":"Statistical Methods > 3. The Fisher’s Exact Method","what":"The Fisher’s exact test assumptions","title":"KRI Method","text":"row totals column totals fixed design. samples mutually exclusive mutually independent. assumptions can assessed knowledge data collected. assumption check necessary.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"special-situations-1","dir":"Articles","previous_headings":"Statistical Methods > 3. The Fisher’s Exact Method","what":"Special situations","title":"KRI Method","text":"Functionally: don’t required input run Fishers: p-value set NA. Results interpretable: don’t want flag certain situations results interpretable due small sample sizes. default threshold minimum denominator requirement 3 patients site level. observed zero cell issue using Fisher’s exact test, however, expected cell zero, means either marginal zero (meaningless) structural zeros (need consider zero-inflated issue: West, L. Hankin, R. (2008), “Exact Tests Two-Way Contingency Tables Structural Zeros,” Journal Statistical Software, 28(11), 1–19).","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"constraints","dir":"Articles","previous_headings":"Statistical Methods > 3. The Fisher’s Exact Method","what":"constraints","title":"KRI Method","text":"small samples, Fisher’s exact test highly discrete. Fisher’s exact test often considered conservative. may due use discrete statistic fixed significance levels (FET Controversies Wiki). Although practice, Fisher’s exact test usually used sample sizes small (e.g., n<5), valid sample sizes. However, sample sizes large, computation exact test evaluating hypergeometric probability function given marginal can take long time.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"recommendation-1","dir":"Articles","previous_headings":"Statistical Methods > 3. The Fisher’s Exact Method","what":"Recommendation","title":"KRI Method","text":"Fisher’s exact test can used scenarios binary KRIs.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"introduction-2","dir":"Articles","previous_headings":"Statistical Methods > 4. The Poisson Regression Method","what":"Introduction","title":"KRI Method","text":"rate outcome KRIs, optional method gsm.core implemented Poisson regression. Poisson distribution often used model count data. YY number counts following Poisson distribution, probability mass function given f(y)=μye−μy! f(y)=\\frac{\\mu^ye^{-\\mu}}{y!}  μ\\mu average number counts E(Y)=Var(Y)=μE(Y)=Var(Y)=\\mu.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"methods-2","dir":"Articles","previous_headings":"Statistical Methods > 4. The Poisson Regression Method","what":"Methods","title":"KRI Method","text":"method fits Poisson model site-level data calculates deviance residuals site. Poisson model run using standard methods stats package fitting glm model family set poisson using “log” link. Site-level deviance residuals calculated using resid stats::predict.glm via broom::augment. Let Y1,...,YNY_1, ..., Y_N independent random variables Yi∼Poisson(μi)Y_i \\sim Poisson(\\mu_i) denoting number events observed nin_i iith observation following Poisson distribution. E(Yi)=μi=niexiβE(Y_i)=\\mu_i=n_ie^{x_i\\beta}. Thus,log-linear generalized linear model (Poisson regression) logμi=logni+xiβYi∼Poisson(μi) \\log{\\mu_i}=\\log{n_i}+x_i\\beta \\quad Y_i \\sim Poisson(\\mu_i) logni\\log{n_i} offset term.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"estimate-and-score-2","dir":"Articles","previous_headings":"Statistical Methods > 4. The Poisson Regression Method","what":"Estimate and Score","title":"KRI Method","text":"function Analyze_Poisson() gsm.core utilizes stats::glm() generate estimate fitted values well deviance residual site-level count data. p-values used scoring metric gsm.core flag possible outliers using thresholds discussed .","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"threshold-2","dir":"Articles","previous_headings":"Statistical Methods > 4. The Poisson Regression Method","what":"Threshold","title":"KRI Method","text":"default, sites deviance residuals exceeding ±5\\pm 5 ±7\\pm 7 Poisson analysis flagged amber red, respectively. thresholds set based empirical approach, use distribution deviance residuals find best separation data identify sites risk. default thresholds set empirical values based pilot studies’ data. However, fully configurable package can customized specified gsm.core functions.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"special-situations-2","dir":"Articles","previous_headings":"Statistical Methods > 4. The Poisson Regression Method","what":"Special Situations","title":"KRI Method","text":"Results interpretable appropriate apply Poisson method: don’t want flag certain situations results interpretable appropriate apply Poisson method due small sample sizes. default threshold minimum denominator requirement 30 days exposure site level.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"poisson-regression-assumptions","dir":"Articles","previous_headings":"Statistical Methods > 4. The Poisson Regression Method","what":"Poisson regression assumptions","title":"KRI Method","text":"Independence responses yiy_i independent . Count data responses yiy_i non-negative integer (counts). Poisson response YiY_i follows Poisson distribution noted mean variance equal μi\\mu_i. Linearity logμi=logni+xiβ\\log{\\mu_i}=\\log{n_i}+x_i\\beta xix_i independent predictors.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"assumption-checks-constraints-and-model-diagnosis","dir":"Articles","previous_headings":"Statistical Methods > 4. The Poisson Regression Method","what":"Assumption checks, constraints and model diagnosis","title":"KRI Method","text":"assumptions independence counted data can assessed knowledge data collected. assumptions Poisson response can checked plotting histogram data comparing empirical mean variance stratified explanatory variable(s). evidence assumption mean=variance violated, oftentimes observe variance>mean. called overdispersion. case, negative binomial distribution provides alternative Var(Yi)=ϕE(Yi)Var(Y_i)=\\phi E(Y_i). Diagnosis: Goodness fit test (chi-squared) deviance residuals. Residuals vs fitted plot. Q-Q plot. considerations: Structural zeros may happen contrast random zeros due sampling poisson distribution. case, mixture model (zero-inflated Poisson model) may required.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/KRIMethod.html","id":"recommendation-2","dir":"Articles","previous_headings":"Statistical Methods > 4. The Poisson Regression Method","what":"Recommendation","title":"KRI Method","text":"Use method Poisson assumptions hold.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"gsm Extensions","text":"vignette describes extend gsm.core creating new “modules”, including metrics, reports shiny apps can run using standard gsm pipeline described vignettes (vignette(\"DataAnalysis\"), DataReporting. shown vignette(\"DataAnalysis\"), existing gsm data pipeline can used capture monitoring ‘snapshot’ study includes variety “modules” including metrics reports. vignette provide detailed specifications creating new modules, description directory structure yaml workflows comprise module pipeline, links resources can used configure study-level gsm pipelines utilize extensions.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"module-configuration","dir":"Articles","previous_headings":"","what":"Module Configuration","title":"gsm Extensions","text":"gsm modules typically part R package YAML configuration file - {module_name}.yaml - saved \\inst\\workflow\\4_modules. Module config files include 3 key properties: meta: (required) Report metadata used centralized library fields referenced steps section workflow. spec: (required) Data table requirement report. Typically Mapped_* Reporting_* data. steps: (required) Functions produce reporting output Mapped_* /Reporting_* data final output (html, csv shinyApp). Detailed specifications sections provided .","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"example-module-configuration-yamls","dir":"Articles","previous_headings":"Module Configuration","what":"Example Module Configuration YAMLs","title":"gsm Extensions","text":"links several sample module configuration files: 13 Standard gsm KRIs (e.g. Adverse Event KRI Metric) Site- Country-level KRI Report","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"meta-specification","dir":"Articles","previous_headings":"Module Configuration","what":"meta Specification","title":"gsm Extensions","text":"meta section workflow YAML provides key metadata describing module. must include following fields: Name: Name reporting output. Type: “Report”, “Metric” “App” ID: unique ID module. workflow file name, without extension. Description: one-line description module specified workflow. Priority: optional number specifying priority workflow within directory, lower numbers higher priority, running first. used workflows within directory require outputs workflows, thus need run particular order. missing, set 0 run first. Details: optional detailed description module specified workflow. Repo: Package repo version. compatible repo parameter remotes::install_github(). Qualified: Output qualified via qualification process specified . Pilot: Output used pilot studies maintained package repository. Prototype: Output created using custom scripts ad-hoc basis. Additional meta header required fields Modules: Permission: Level permissions viewing match Users argument Study Configuration file. Common values: Admin, Users. Output: output workflow, including format. workflow produce single reporting output. ExampleURL: Location sample report. html reports, typically page pkgdown site (ending “/{ModuleID}.html”), sample app deployed shinyapps.io. Additional meta header required fields {gsm.kri} metrics: GroupLevel: level metric calculated. Common values: Site, Country. Abbreviation: Abbreviation metric. Metric: Full name metric. Numerator: numerator metric. Denominator: denominator metric. AnalysisType: analysis type. Common values: rate, binary Model: model used calculate metric. Common values: Normal Approximation, Exact, Bayesian. Score: score used calculate metric. Common values: Z-Score, Adjusted Z-Score, P-Value. Threshold: thresholds flag. Used gsm.core::Flag(). Flag: optional numeric values assigned flag. Used gsm.core::Flag(). AccrualThreshold: minimum threshold needed apply flag. AccrualMetric: metric apply minimum threshold needed apply flag. Accepted values: Denominator, Numerator, Difference.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"meta-example","dir":"Articles","previous_headings":"Module Configuration > meta Specification","what":"meta example","title":"gsm Extensions","text":"simple meta section report might look like :","code":"File: report_example.yaml   ID: example_report   Name: An example report   Description: A report that is an example   Type: Report   Repo: gsm.example v1.0.0   Status: Qualified   Permission: Users   Outputs: An html report   ExampleURL: https://gilead-biostats.github.io/gsm.example/example_report.html"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"spec-specification","dir":"Articles","previous_headings":"Module Configuration","what":"spec Specification","title":"gsm Extensions","text":"spec section workflow YAML specifies data requirements workflow, including data tables required columns needed table. gsm data pipeline designed highly customizable, purposes vignette, assume usage standard gsm data model described vignette(\"DataModel\"). standard use case, modules pull primarily “Mapped” “Reporting” data layers. spec section workflow YAML formatted list data tables, table containing list columns. Finally, column contains following parameters: type: Character field describing data type column. Use mode defined R. parameter optional. source_col: Character field containing column name source data frame. necessary source column name differs target column name.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"spec-example-metric-module","dir":"Articles","previous_headings":"Module Configuration > spec Specification","what":"spec example: Metric Module","title":"gsm Extensions","text":"Metric specs typically pulled mapped data layer. example, spec section AE KRI metric : , summary, AE KRI metric requires two data tables, Mapped_AE Mapped_ENROLL, mapped data layer. Mapped_AE table must character Subject ID column called subjid Mapped_ENROLL must character Subject ID (subjid) Investigator ID (invid) columns numeric timeonstudy column. columns required metric. Note columns may present tables (perhaps due spec differently module), columns listed spec section required metric run.","code":"spec:   Mapped_AE:     subjid:       type: character   Mapped_ENROLL:     subjid:       type: character     invid:       type: character     timeonstudy:       type: integer"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"spec-examples-report-module","dir":"Articles","previous_headings":"Module Configuration > spec Specification","what":"spec examples: Report Module","title":"gsm Extensions","text":"Report modules often pull data Reporting data layer. example, Site-level KRI report following spec: Note _all key word used specify standard columns Reporting_Results data table expected table required - without , report can’t run. Reporting tables used enhance report, required, thus included spec. Mapped data layer also available use reports apps. typically, mapped data used drill high-level metric findings (e.g. “Site 5 elevated AE rate relative studies”) site- participant- level details (e.g. “Participant 00016 Site 5 5 AEs 3 SAEs reported last 3 months.”). example, Deep Dive app includes Reporting Mapped data spec. representative excerpt spec:","code":"spec:   Reporting_Results:      _all:       required: true spec:   Reporting_Results:      _all:       required: true   Mapped_AE:     subjid:       type: character     aeterm:       type: character      aesev:        type: character     ..."},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"steps-specification","dir":"Articles","previous_headings":"Module Configuration","what":"steps Specification","title":"gsm Extensions","text":"Finally, module yaml configuration file steps property describes detail module run. steps section list functions run sequence produce final output. item steps following properties: name: name function run. typically function available one {gsm} packages package listed repo section meta header. output: name output function. name data table created function. params: list parameters passed function. parameters specific function run. See details specify parameters function. Note: important note default behavior gsm.core::RunWorkflow() gsm.core::RunWorkflows() functions return last output steps section workflow. therefore, yaml file- regardless directory - produce one output, whether data table, list, html output, deployed shiny app, object needed produce module output. steps complex part module configuration vary greatly depending module type specific requirements module. gsm.core provides several functions allow module yaml files run standard way. See ?gsm.core::RunWorkflow() details.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"stepsparams-specification","dir":"Articles","previous_headings":"Module Configuration > steps Specification","what":"steps[]$params Specification","title":"gsm Extensions","text":"processing YAML meta spec sections, gsm.core::RunWorkflow() calls gsm.core::RunStep() step steps section YAML. params section step passed gsm.core::RunStep() list parameters along copy metadata header (lMeta) data (lData). gsm.core::RunStep() parses list params passing data lMeta lData appropriate - see ?gsm.core::RunStep detailed parameter values populated. Finally, parsed parameters passed function specified name field step.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"metric-steps-example","dir":"Articles","previous_headings":"Module Configuration > steps Specification > steps examples","what":"Metric steps example","title":"gsm Extensions","text":"example , steps produce AE analysis output specified. , Threshold, GroupLevel, Type, AccrualThreshold AccrualMetric specified meta section workflow, access via paramVal process discussed . default, output steps run gsm.core::RunWorkflows() list data tables, specified final list step workflow.","code":"steps:   - name: gsm.core::ParseThreshold     output: vThreshold     params:       strThreshold: Threshold   - name: gsm.core::Input_Rate     output: Analysis_Input     params:       dfSubjects: Mapped_SUBJ       dfNumerator: Mapped_AE       dfDenominator: Mapped_SUBJ       strSubjectCol: subjid       strGroupCol: invid       strGroupLevel: GroupLevel       strNumeratorMethod: Count       strDenominatorMethod: Sum       strDenominatorCol: timeonstudy   - name: gsm.core::Transform_Rate     output: Analysis_Transformed     params:       dfInput: Analysis_Input   - name: gsm.core::Analyze_NormalApprox     output: Analysis_Analyzed     params:       dfTransformed: Analysis_Transformed       strType: AnalysisType   - name: gsm.core::Flag     output: Analysis_Flagged     params:       dfAnalyzed: Analysis_Analyzed       vThreshold: vThreshold       nAccrualThreshold: AccrualThreshold       strAccrualMetric: AccrualMetric   - name: gsm.core::Summarize     output: Analysis_Summary     params:       dfFlagged: Analysis_Flagged   - name: list     output: kri0001     params:       id: ID       input: Analysis_Input       transformed: Analysis_Transformed       analyzed: Analysis_Analyzed       flagged: Analysis_Flagged       summary: Analysis_Summary"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"report-steps-example","dir":"Articles","previous_headings":"Module Configuration > steps Specification > steps examples","what":"Report steps example","title":"gsm Extensions","text":"example, steps produce site-level KRI report displayed. , inputs Reporting_* data, goes simple filtering process via gsm.core::RunQuery Charts Report created following two functions","code":"steps:   - name: gsm.core::RunQuery     output: Reporting_Results_Site     params:       df: Reporting_Results       strQuery: \"SELECT * FROM df WHERE GroupLevel == 'Site'\"   - name: gsm.core::RunQuery     output: Reporting_Metrics_Site     params:       df: Reporting_Metrics       strQuery: \"SELECT * FROM df WHERE GroupLevel == 'Site'\"   - name: gsm.kri::MakeCharts     output: lCharts_Site     params:       dfResults: Reporting_Results_Site       dfGroups: Reporting_Groups       dfBounds: Reporting_Bounds       dfMetrics: Reporting_Metrics_Site   - name: gsm.kri::Report_KRI     output: lReport      params:       lCharts: lCharts_Site       dfResults: Reporting_Results_Site       dfGroups: Reporting_Groups       dfMetrics: Reporting_Metrics_Site"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"directory-structure-for-workflows","dir":"Articles","previous_headings":"","what":"Directory Structure for Workflows","title":"gsm Extensions","text":"extension produces report(s) workflow directory inst package follows standard structure. directory contain 4 folders store yaml workflow files map data, perform analysis, produce reporting data, generate output module. module output requires ’s unique yaml 4_modules folder, take inputs generated previous three directories.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"mappings","dir":"Articles","previous_headings":"Directory Structure for Workflows","what":"/1_mappings","title":"gsm Extensions","text":"mappings folder {gsm.mapping} package contains mappings Raw_* data Mapped_* data. file within directory named data table creating, minus Mapped_ suffix. yamls contain three required sections, discussed detail Module Configuration section . yamls folder combined via gsm.mapping::CombineSpecs() create master spec defines necessary tables columns module(s) package. two examples mapping yaml files- first requires transformations, simple, second requires multiple steps produce desired mapped data.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"mapped_ae-mapping-yaml-file","dir":"Articles","previous_headings":"Directory Structure for Workflows > /1_mappings","what":"Mapped_AE mapping yaml file","title":"gsm Extensions","text":"","code":"meta:   Type: Mapped   ID: AE   Description: Adverse Event Data Mapping    Priority: 1 spec:   Raw_AE:     subjid:       type: character     aeser:       type: character steps:   - output: Mapped_AE     name: =     params:       lhs: Mapped_AE       rhs: Raw_AE"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"mapped_datachg-mapping-yaml-file","dir":"Articles","previous_headings":"Directory Structure for Workflows > /1_mappings","what":"Mapped_DATACHG mapping yaml file","title":"gsm Extensions","text":"","code":"meta:   Type: Mapped   ID: DATACHG   Description: Data Changes Data Mapping    Priority: 2 spec:    Raw_DATACHG:     subject_nsv:       type: character       source_col: subjectname     n_changes:       type: integer   Mapped_SUBJ:     subjid:       type: character     subject_nsv:       type: character steps:   # Merge [ subjid ] onto EDC domains.   - output: Temp_SubjectLookup     name: dplyr::select     params:       .data: Mapped_SUBJ       subjid: subjid       subject_nsv: subject_nsv   - output: Mapped_DATACHG     name: dplyr::left_join     params:       x: Raw_DATACHG       \"y\": Temp_SubjectLookup       by: subject_nsv"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"metrics","dir":"Articles","previous_headings":"Directory Structure for Workflows","what":"/2_metrics","title":"gsm Extensions","text":"metrics directory contains workflows perform analysis steps, converting mapped data metrics displayed report. case {gsm.kri}, metrics 12 Key Risk Indicators, calculated site- country-level, discussed Data Analysis Step--Step Vignette. yaml file produces list analysis data tables capture formatted input table, transformed table, flagged table, summary table. general, yamls least provide summary table contains statistics metric specified level aggregation. Examples yamls can found Module Configuration section, well (vignette(\"DataAnalysis\")) vignette.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"reporting","dir":"Articles","previous_headings":"Directory Structure for Workflows","what":"/3_reporting","title":"gsm Extensions","text":"reporting directory intended hold workflows produce data required module outputs. typically requires stacking analysis data relevant metrics single results data frame can surfaced report, multiple reports. Additionally, information must taken analysis output, study/site/group/metric metadata supporting statistics constructed workflows folder. Examples yamls can found Module Configuration section, well vignette(\"DataReporting\").","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/articles/gsmExtensions.html","id":"modules","dir":"Articles","previous_headings":"Directory Structure for Workflows","what":"/4_modules","title":"gsm Extensions","text":"modules directory contains final workflow(s) reporting pipeline. workflows produce single output based data tables produced previous directories. module workflows contain necessary meta information, detailed Module Configuration section , along data tables required, steps produce , gsm.core::RunWorkflow() can take workflow produce module output. example module yaml workflow KRI Site Report {gsm.kri}","code":"meta:   Type: Report    ID: report_kri_site   Output: html   Name: Site-Level Key Risk Indicator Report   Description: A report summarizing key risk indicators at the site level   Repo: gsm.kri v1.0.0   Status: Qualified   Permission: Users   Outputs: An html report   ExampleURL: https://gilead-biostats.github.io/gsm.kri/report_kri_site.html spec:   Reporting_Results:     _all:       required: true   Reporting_Metrics:     _all:       required: true   Reporting_Groups:     _all:       required: true   Reporting_Bounds:     _all:       required: true steps:   - name: gsm.core::RunQuery     output: Reporting_Results_Site     params:       df: Reporting_Results       strQuery: \"SELECT * FROM df WHERE GroupLevel == 'Site'\"   - name: gsm.core::RunQuery     output: Reporting_Metrics_Site     params:       df: Reporting_Metrics       strQuery: \"SELECT * FROM df WHERE GroupLevel == 'Site'\"   - name: gsm.kri::MakeCharts     output: lCharts_Site     params:       dfResults: Reporting_Results_Site       dfGroups: Reporting_Groups       dfBounds: Reporting_Bounds       dfMetrics: Reporting_Metrics_Site   - name: gsm.kri::Report_KRI     output: lReport     params:       lCharts: lCharts_Site       dfResults: Reporting_Results_Site       dfGroups: Reporting_Groups       dfMetrics: Reporting_Metrics_Site"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeremy Wildfire. Author, maintainer. George Wu. Author. Spencer Childress. Author. Laura Maxwell. Author. Jacob Anderson. Author. Jon Harmon. Author. Zelos Zhu. Author. Matt Roumaya. Author. Anne Zheng. Author. Devin Pastoor. Author. Nathan Kosiba. Author. Douglas Sanders. Author. Li Ge. Author. Zhongkai Wang. Author. Colleen McLaughlin. Author. Chelsea Dickens. Author. Maya Gans. Author. Gilead Sciences. Copyright holder.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wildfire J, Wu G, Childress S, Maxwell L, Anderson J, Harmon J, Zhu Z, Roumaya M, Zheng , Pastoor D, Kosiba N, Sanders D, Ge L, Wang Z, McLaughlin C, Dickens C, Gans M (2025). gsm.core: Good Statistical Monitoring. R package version 1.1.0.9000, https://github.com/Gilead-BioStats/gsm.core.","code":"@Manual{,   title = {gsm.core: Good Statistical Monitoring},   author = {Jeremy Wildfire and George Wu and Spencer Childress and Laura Maxwell and Jacob Anderson and Jon Harmon and Zelos Zhu and Matt Roumaya and Anne Zheng and Devin Pastoor and Nathan Kosiba and Douglas Sanders and Li Ge and Zhongkai Wang and Colleen McLaughlin and Chelsea Dickens and Maya Gans},   year = {2025},   note = {R package version 1.1.0.9000},   url = {https://github.com/Gilead-BioStats/gsm.core}, }"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/index.html","id":"good-statistical-monitoring-gsmcore-r-package","dir":"","previous_headings":"","what":"Good Statistical Monitoring","title":"Good Statistical Monitoring","text":"gsm.core package provides analytical foundation standardized Risk Based Quality Monitoring (RBQM) framework clinical trials pairs flexible data pipeline robust reports like one shown .  README provides high-level overview gsm.core; see package website additional details. gsm.core package successor package {gsm}, deprecated March 2025. contents {gsm} split among 4 packages follows: gsm.core: package containing analytics functionality utility functions run workflows. {gsm.mapping}: package provides workflows apply necessary data transformation raw/source datasets appropriate domains. {gsm.kri}: package provides workflows generate metrics functionality visualize report metrics. {gsm.reporting}: package provides workflows generate reporting data model needed generate reports.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Good Statistical Monitoring","text":"gsm.core package lays framework perform risk assessments primarily focused detecting differences quality site-level. “High quality” defined absence errors matter. interpret focusing detecting potential issues related critical data process across major risk categories safety, efficacy, disposition, treatment, general quality, category consists one risk assessment(s). risk assessment analyze data flag sites potential issues provide visualization help user understand issue. relevant references provided . Centralized Statistical Monitoring: 1, 2 EMA/FDA Guidance Risk Based Management: 1, 2, 3, 4 Risk Based Quality Management: 1, 2, 3 Related tools: 1","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/index.html","id":"process-overview","dir":"","previous_headings":"","what":"Process Overview","title":"Good Statistical Monitoring","text":"gsm.core package foundation data pipeline RBM using R. package, along {gsm.mapping}, {gsm.kri} {gsm.reporting} provides framework allows users assess visualize site-level risk clinical trial data. packages currently provide assessments following domains: Adverse Event Reporting Rate Serious Adverse Event Reporting Rate Non-important Protocol Deviation Rate Important Protocol Deviation Rate Grade 3+ Lab Abnormality Rate Study Discontinuation Rate Treatment Discontinuation Rate Query Rate Outstanding Query Rate Outstanding Data Entry Rate Data Change Rate Screen Failure Rate gsm.core assessments use standardized 6 step data pipeline: Input_Rate - Converts raw data input data. Transform - Converts input data transformed data. Analyze - Converts transformed data analyzed data. Threshold - Uses analyzed data create one numeric thresholds. Flag - Uses analyzed data numeric thresholds create flagged data. Summarize - Selects key columns flagged data create summary data. learn gsm.core’s data pipeline, visit Data Pipeline Vignette.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/index.html","id":"reporting","dir":"","previous_headings":"","what":"Reporting","title":"Good Statistical Monitoring","text":"Detailed RMarkdown/HTML reporting built gsm.core, provides detailed overview risk assessments given trial. example, AE risk assessment looks like :  Full reports sample trial run {clindata} provided : Site Report Country Report","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/index.html","id":"quality-control","dir":"","previous_headings":"","what":"Quality Control","title":"Good Statistical Monitoring","text":"Since {gsm.core} designed use GCP framework, conducted extensive quality control part development process. particular, following: Qualification Workflow - assessments Qualified described Qualification Workflow Vignette. Qualification Report Vignette generated attached release. Unit Tests - Unit tests written core functions. Workflow Tests - Additional unit tests confirm core workflows behave expected. Contributor Guidelines - Detailed contributor guidelines including step--step processes code development releases provided vignette. Data Model - Vignettes providing detailed descriptions data model. Code Examples - Cookbook Vignette provides series simple examples, functions include examples part Roxygen documentation. Code Review - Code review conducted using GitHub Pull Requests (PRs), log PRs included Qualification Report Vignette. Function Documentation - Detailed documentation function maintained Roxygen. Package Checks - Standard package checks run using GitHub Actions must passing PRs merged. Data Specifications - Machine-readable data specifications maintained KRIs. Specifications automatically added relevant function documentation. Continuous Integration - Continuous integration provided via GitHub Actions. Regression Testing - Extensive QC testing done release. Code Formatting - Code formatted {styler} release. Additional detail, including links functional documentation vignettes, available package website.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Fisher.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher's Exact Test Analysis. — Analyze_Fisher","title":"Fisher's Exact Test Analysis. — Analyze_Fisher","text":"Analyzes count data using Fisher's exact test. information can found Fisher's Exact Method Section KRI Method vignette.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Fisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher's Exact Test Analysis. — Analyze_Fisher","text":"","code":"Analyze_Fisher(dfTransformed, strOutcome = \"Numerator\")"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Fisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher's Exact Test Analysis. — Analyze_Fisher","text":"dfTransformed data.frame Transformed data analysis. Data one record per site expected columns: GroupID, GroupLevel, Numerator, Denominator, Metric. details see Data Model vignette: vignette(\"DataModel\", package = \"gsm.core\"). function, dfTransformed typically created using Transform_Rate(). strOutcome character required, name column dfTransformed dataset perform Fisher's exact test . Default \"Numerator\".","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Fisher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher's Exact Test Analysis. — Analyze_Fisher","text":"data.frame one row per site columns: GroupID, Numerator, Numerator_Other, Denominator, Denominator_Other, Prop, Prop_Other, Metric, Estimate, Score.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Fisher.html","id":"statistical-methods","dir":"Reference","previous_headings":"","what":"Statistical Methods","title":"Fisher's Exact Test Analysis. — Analyze_Fisher","text":"function Analyze_Fisher utilizes stats::fisher.test generate estimate odds ratio well p-value using Fisher’s exact test site-level count data. site, Fisher’s exact test conducted comparing given site sites combined 2×2 contingency table. p-values used scoring metric {gsm.core} flag possible outliers. default stats::fisher.test uses two-sided test (equivalent testing null = 1) compute p-values Monte Carlo simulation unless simulate.p.value = TRUE. Sites p-values less 0.05 Fisher’s exact test analysis flagged default. significance level set common choice.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Fisher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fisher's Exact Test Analysis. — Analyze_Fisher","text":"","code":"dfTransformed <- Transform_Rate(   analyticsInput[1:20,] ) dfAnalyzed <- Analyze_Fisher(dfTransformed)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Identity.html","id":null,"dir":"Reference","previous_headings":"","what":"Identity Analysis. — Analyze_Identity","title":"Identity Analysis. — Analyze_Identity","text":"Used data pipeline Transform Flag rename KRI Score columns. information can found Identity Method KRI Method vignette.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Identity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identity Analysis. — Analyze_Identity","text":"","code":"Analyze_Identity(dfTransformed, strValueCol = \"Metric\")"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Identity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identity Analysis. — Analyze_Identity","text":"dfTransformed data.frame Transformed data analysis. Data one record per site expected columns: GroupID, GroupLevel, Numerator, Denominator, Metric. details see Data Model vignette: vignette(\"DataModel\", package = \"gsm.core\"). function, dfTransformed typically created using Transform_Count(). strValueCol character Name column copied Score","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Identity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identity Analysis. — Analyze_Identity","text":"data.frame one row per site columns: GroupID, TotalCount, Metric, Score.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Identity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identity Analysis. — Analyze_Identity","text":"","code":"dfTransformed <- Transform_Count(analyticsInput, strCountCol = \"Numerator\") dfAnalyzed <- Analyze_Identity(dfTransformed) #> `Score` column created from `Metric`."},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_NormalApprox.html","id":null,"dir":"Reference","previous_headings":"","what":"Funnel Plot Analysis with Normal Approximation for Binary and Rate Outcomes. — Analyze_NormalApprox","title":"Funnel Plot Analysis with Normal Approximation for Binary and Rate Outcomes. — Analyze_NormalApprox","text":"Creates analysis results data percentage/rate data using funnel plot method normal approximation. information can found Normal Approximation Method KRI Method vignette.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_NormalApprox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Funnel Plot Analysis with Normal Approximation for Binary and Rate Outcomes. — Analyze_NormalApprox","text":"","code":"Analyze_NormalApprox(dfTransformed, strType = \"binary\")"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_NormalApprox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Funnel Plot Analysis with Normal Approximation for Binary and Rate Outcomes. — Analyze_NormalApprox","text":"dfTransformed data.frame Transformed data analysis. Data one record per site expected columns: GroupID, GroupLevel, Numerator, Denominator, Metric. details see Data Model vignette: vignette(\"DataModel\", package = \"gsm.core\"). function, dfTransformed typically created using Transform_Rate(). strType character Statistical outcome type. Valid values: \"binary\" (default) \"rate\"","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_NormalApprox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Funnel Plot Analysis with Normal Approximation for Binary and Rate Outcomes. — Analyze_NormalApprox","text":"data.frame one row per site columns: GroupID, Numerator, Denominator, Metric, OverallMetric, Factor, Score.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_NormalApprox.html","id":"statistical-methods","dir":"Reference","previous_headings":"","what":"Statistical Methods","title":"Funnel Plot Analysis with Normal Approximation for Binary and Rate Outcomes. — Analyze_NormalApprox","text":"function applies funnel plots using asymptotic limits based normal approximation binomial distribution binary outcome, normal approximation Poisson distribution rate outcome volume (sample sizes total exposure sites) assess data quality safety.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_NormalApprox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Funnel Plot Analysis with Normal Approximation for Binary and Rate Outcomes. — Analyze_NormalApprox","text":"","code":"# Binary dfTransformed <- Transform_Rate(analyticsInput) #> Warning: 1 values of [ GroupID ] with a [ Denominator ] value of 0 removed.  dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = \"binary\") #> `OverallMetric`, `Factor`, and `Score` columns created from normal #> approximation.  # Rate dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = \"rate\") #> `OverallMetric`, `Factor`, and `Score` columns created from normal #> approximation."},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_NormalApprox_PredictBounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Funnel Plot Analysis with Normal Approximation - Predicted Boundaries. — Analyze_NormalApprox_PredictBounds","title":"Funnel Plot Analysis with Normal Approximation - Predicted Boundaries. — Analyze_NormalApprox_PredictBounds","text":"Applies funnel plot analysis normal approximation site-level data, calculates predicted percentages/rates upper- lower-bounds across full range sample sizes/total exposure values.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_NormalApprox_PredictBounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Funnel Plot Analysis with Normal Approximation - Predicted Boundaries. — Analyze_NormalApprox_PredictBounds","text":"","code":"Analyze_NormalApprox_PredictBounds(   dfTransformed,   vThreshold = c(-3, -2, 2, 3),   strType = \"binary\",   nStep = NULL )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_NormalApprox_PredictBounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Funnel Plot Analysis with Normal Approximation - Predicted Boundaries. — Analyze_NormalApprox_PredictBounds","text":"dfTransformed data.frame Transformed data analysis. Data one record per site expected columns: GroupID, GroupLevel, Numerator, Denominator, Metric. details see Data Model vignette: vignette(\"DataModel\", package = \"gsm.core\"). function, dfTransformed typically created using Transform_Rate(). vThreshold numeric upper lower boundaries based standard deviation. identical thresholds used *_Assess() functions. strType character Statistical method. Valid values: \"binary\" (default) \"rate\" nStep numeric step size imputed bounds.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_NormalApprox_PredictBounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Funnel Plot Analysis with Normal Approximation - Predicted Boundaries. — Analyze_NormalApprox_PredictBounds","text":"data.frame containing predicted boundary values upper lower bounds across range observed values.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_NormalApprox_PredictBounds.html","id":"statistical-methods","dir":"Reference","previous_headings":"","what":"Statistical Methods","title":"Funnel Plot Analysis with Normal Approximation - Predicted Boundaries. — Analyze_NormalApprox_PredictBounds","text":"function applies funnel plot analysis normal approximation site-level data calculates predicted percentages/rates upper- lower- bounds (funnels) based standard deviation mean across full range sample sizes/total exposure values.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_NormalApprox_PredictBounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Funnel Plot Analysis with Normal Approximation - Predicted Boundaries. — Analyze_NormalApprox_PredictBounds","text":"","code":"# Binary dfTransformed <- Transform_Rate(analyticsInput) #> Warning: 1 values of [ GroupID ] with a [ Denominator ] value of 0 removed.  dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = \"binary\") #> `OverallMetric`, `Factor`, and `Score` columns created from normal #> approximation. dfBounds <- Analyze_NormalApprox_PredictBounds(dfTransformed, c(-3, -2, 2, 3), strType = \"binary\") #> nStep was not provided. Setting default step to 3.332.  # Rate dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = \"rate\") #> `OverallMetric`, `Factor`, and `Score` columns created from normal #> approximation. dfBounds <- Analyze_NormalApprox_PredictBounds(dfTransformed, c(-3, -2, 2, 3), strType = \"rate\") #> nStep was not provided. Setting default step to 3.332."},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poisson Analysis - Site Residuals. — Analyze_Poisson","text":"","code":"Analyze_Poisson(dfTransformed)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poisson Analysis - Site Residuals. — Analyze_Poisson","text":"dfTransformed data.frame Transformed data analysis. Data one record per site expected columns: GroupID, GroupLevel, Numerator, Denominator, Metric. details see Data Model vignette: vignette(\"DataModel\", package = \"gsm.core\"). function, dfTransformed typically created using Transform_Rate().","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poisson Analysis - Site Residuals. — Analyze_Poisson","text":"data.frame one row per site columns: GroupID, Numerator, Denominator, Metric, Score, PredictedCount.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Poisson Analysis - Site Residuals. — Analyze_Poisson","text":"Fits Poisson model site-level data adds columns capturing Residual Predicted Count site. information can found Poisson Regression Method KRI Method vignette.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Poisson.html","id":"statistical-methods","dir":"Reference","previous_headings":"","what":"Statistical Methods","title":"Poisson Analysis - Site Residuals. — Analyze_Poisson","text":"function fits Poisson model site-level data calculates residuals site. Poisson model run using standard methods stats package fitting glm model family set poisson using \"log\" link. Site-level residuals calculated using stats::predict.glm via broom::augment.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Poisson Analysis - Site Residuals. — Analyze_Poisson","text":"","code":"dfTransformed <- Transform_Rate(analyticsInput) #> Warning: 1 values of [ GroupID ] with a [ Denominator ] value of 0 removed.  dfAnalyzed <- Analyze_Poisson(dfTransformed) #> ℹ Fitting log-linked Poisson generalized linear model of [ Numerator ] ~ [ log( Denominator ) ]."},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Poisson_PredictBounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson Analysis - Predicted Boundaries. — Analyze_Poisson_PredictBounds","title":"Poisson Analysis - Predicted Boundaries. — Analyze_Poisson_PredictBounds","text":"Fits Poisson model site-level data calculates predicted count values upper- lower- bounds across full range exposure values.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Poisson_PredictBounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poisson Analysis - Predicted Boundaries. — Analyze_Poisson_PredictBounds","text":"","code":"Analyze_Poisson_PredictBounds(   dfTransformed,   vThreshold = c(-5, 5),   nStep = NULL )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Poisson_PredictBounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poisson Analysis - Predicted Boundaries. — Analyze_Poisson_PredictBounds","text":"dfTransformed data.frame Transformed data analysis. Data one record per site expected columns: GroupID, GroupLevel, Numerator, Denominator, Metric. details see Data Model vignette: vignette(\"DataModel\", package = \"gsm.core\"). function, dfTransformed typically created using Transform_Rate(). vThreshold numeric upper lower boundaries residual space. identical thresholds used AE_Assess(). nStep numeric step size imputed bounds.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Poisson_PredictBounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poisson Analysis - Predicted Boundaries. — Analyze_Poisson_PredictBounds","text":"data.frame containing predicted boundary values upper lower bounds across range observed values.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Poisson_PredictBounds.html","id":"statistical-methods","dir":"Reference","previous_headings":"","what":"Statistical Methods","title":"Poisson Analysis - Predicted Boundaries. — Analyze_Poisson_PredictBounds","text":"function fits Poisson model site-level data calculates residuals site. Poisson model run using standard methods stats package fitting glm model family set poisson using \"log\" link. Upper lower boundary values calculated using method described TODO: Add link.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Analyze_Poisson_PredictBounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Poisson Analysis - Predicted Boundaries. — Analyze_Poisson_PredictBounds","text":"","code":"dfTransformed <- Transform_Rate(analyticsInput) #> Warning: 1 values of [ GroupID ] with a [ Denominator ] value of 0 removed.  dfBounds <- Analyze_Poisson_PredictBounds(dfTransformed, c(-5, 5)) #> → nStep was not provided. Setting default step to 0.0241371381771636"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/CheckSpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the data and spec are compatible — CheckSpec","title":"Check if the data and spec are compatible — CheckSpec","text":"Check data spec compatible comparing data.frames columns spec data.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/CheckSpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the data and spec are compatible — CheckSpec","text":"","code":"CheckSpec(lData, lSpec)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/CheckSpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the data and spec are compatible — CheckSpec","text":"lData list data.frames. lSpec list specifying expected structure data.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/CheckSpec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the data and spec are compatible — CheckSpec","text":"function return value. either prints message indicating data.frames columns spec present data, throws error data.frame column missing.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/CheckSpec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the data and spec are compatible — CheckSpec","text":"","code":"lData <- list(reporting_bounds = gsm.core::reportingBounds,               reporting_results = gsm.core::reportingResults) lSpec <- list(   reporting_bounds = list(     Metric = list(type = \"numeric\"),     Numerator = list(type = \"numeric\"),     LogDenominator = list(type = \"numeric\"),     MetricID = list(type = \"character\")   ),   reporting_results = list(     GroupID = list(type = \"character\"),     GroupLevel = list(type = \"character\"),     Numerator = list(type = \"integer\"),     Denominator = list(type = \"integer\")   ) ) CheckSpec(lData, lSpec) # Prints message that everything is found #> → All 2 data.frame(s) in the spec are present in the data: reporting_bounds, reporting_results #> → All specified columns in reporting_bounds are in the expected format #> → All specified columns in reporting_results are in the expected format #> → All 8 specified column(s) in the spec are present in the data: reporting_bounds$Metric, reporting_bounds$Numerator, reporting_bounds$LogDenominator, reporting_bounds$MetricID, reporting_results$GroupID, reporting_results$GroupLevel, reporting_results$Numerator, reporting_results$Denominator  if (FALSE) { # \\dontrun{ lSpec$reporting_groups$NotACol <- list(type = \"character\") CheckSpec(lData, lSpec) # Throws error that NotACol is missing } # }"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag — Flag","title":"Flag — Flag","text":"Add columns flagging sites represent possible statistical outliers Identity statistical method used.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag — Flag","text":"","code":"Flag(   dfAnalyzed,   strColumn = \"Score\",   vThreshold = c(-3, -2, 2, 3),   vFlag = c(-2, -1, 0, 1, 2),   vFlagOrder = c(2, -2, 1, -1, 0),   nAccrualThreshold = NULL,   strAccrualMetric = NULL )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag — Flag","text":"dfAnalyzed data.frame flags added. strColumn character Name column use thresholding. Default: \"Score\" vThreshold numeric Vector numeric values representing threshold values. Default c(-3,-2,2,3) typical z-scores. vFlag numeric Vector flag values. must one item Flag thresholds - length(vThreshold)+1 == length(vFlagValues). Default c(-2,-1,0,1,2), typical z-scores. vFlagOrder numeric Vector ordered flag values. Output data.frame sorted based flag column using order provided. NULL (values match vFlag) leave data unsorted. Must identical values vFlag. Default c(2,-2,1,-1,0) puts largest z-score outliers first data set. nAccrualThreshold numeric Specifies minimum value required return score calculate flag. Default: NULL strAccrualMetric character Specifies Metric apply nAccrualThreshold order determine validity flag. Options \"Numerator\", \"Denominator\" \"Difference\". \"Difference\" specified, threshold based difference Denominator Numerator given Group. Default: NULL.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag — Flag","text":"data.frame dfAnalyzed returned additional Flag column.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flag — Flag","text":"function provides generalized framework flagging sites part GSM data model (see vignette(\"DataModel\", package = \"gsm.core\")).","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag.html","id":"data-specification","dir":"Reference","previous_headings":"","what":"Data Specification","title":"Flag — Flag","text":"Flag designed support input data (dfAnalyzed) Analyze_Identity() function. minimum, input data must strGroupCol parameter numeric strColumn parameter defined. strColumn compared specified thresholds vThreshold define new Flag column, identifies possible statistical outliers. user like see directionality identified points, can define strValueColumn parameter, assign positive negative indication already flagged points. following columns considered required: GroupID - Group ID; default SiteID GroupLevel - Group Type strColumn - column use thresholding following column considered optional: strValueColumn - column used sign/directionality flagging","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag — Flag","text":"","code":"dfTransformed <- Transform_Rate(analyticsInput) #> Warning: 1 values of [ GroupID ] with a [ Denominator ] value of 0 removed. dfAnalyzed <- Analyze_NormalApprox(dfTransformed) #> `OverallMetric`, `Factor`, and `Score` columns created from normal #> approximation. dfFlagged <- Flag(dfAnalyzed) #> ℹ Sorted dfFlagged using custom Flag order: 2.Sorted dfFlagged using custom Flag order: -2.Sorted dfFlagged using custom Flag order: 1.Sorted dfFlagged using custom Flag order: -1.Sorted dfFlagged using custom Flag order: 0."},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag_Accrual.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Flags based on Threshold and Metric — Flag_Accrual","title":"Filter Flags based on Threshold and Metric — Flag_Accrual","text":"Filter Flags based Threshold Metric","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag_Accrual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Flags based on Threshold and Metric — Flag_Accrual","text":"","code":"Flag_Accrual(dfFlagged, nAccrualThreshold, strAccrualMetric)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag_Accrual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Flags based on Threshold and Metric — Flag_Accrual","text":"dfFlagged data.frame format produced Flag(). nAccrualThreshold numeric Specifies minimum value required return score calculate flag. Default: NULL strAccrualMetric character Specifies Metric apply nAccrualThreshold order determine validity flag. Options \"Numerator\", \"Denominator\" \"Difference\". \"Difference\" specified, threshold based difference Denominator Numerator given Group. Default: NULL.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag_NormalApprox.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag_NormalApprox — Flag_NormalApprox","title":"Flag_NormalApprox — Flag_NormalApprox","text":"#' @description","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag_NormalApprox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag_NormalApprox — Flag_NormalApprox","text":"","code":"Flag_NormalApprox(   dfAnalyzed,   strColumn = \"Score\",   vThreshold = c(-3, -2, 2, 3),   vFlag = c(-2, -1, 0, 1, 2),   vFlagOrder = c(2, -2, 1, -1, 0),   nAccrualThreshold = NULL,   strAccrualMetric = NULL )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag_NormalApprox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag_NormalApprox — Flag_NormalApprox","text":"dfAnalyzed data.frame flags added. strColumn character Name column use thresholding. Default: \"Score\" vThreshold numeric Vector numeric values representing threshold values. Default c(-3,-2,2,3) typical z-scores. vFlag numeric Vector flag values. must one item Flag thresholds - length(vThreshold)+1 == length(vFlagValues). Default c(-2,-1,0,1,2), typical z-scores. vFlagOrder numeric Vector ordered flag values. Output data.frame sorted based flag column using order provided. NULL (values match vFlag) leave data unsorted. Must identical values vFlag. Default c(2,-2,1,-1,0) puts largest z-score outliers first data set. nAccrualThreshold numeric Specifies minimum value required return score calculate flag. Default: NULL strAccrualMetric character Specifies Metric apply nAccrualThreshold order determine validity flag. Options \"Numerator\", \"Denominator\" \"Difference\". \"Difference\" specified, threshold based difference Denominator Numerator given Group. Default: NULL.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag_NormalApprox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flag_NormalApprox — Flag_NormalApprox","text":"Alias Flag()","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag_Poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag_Poisson — Flag_Poisson","title":"Flag_Poisson — Flag_Poisson","text":"#' @description","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag_Poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag_Poisson — Flag_Poisson","text":"","code":"Flag_Poisson(   dfAnalyzed,   strColumn = \"Score\",   vThreshold = c(-3, -2, 2, 3),   vFlag = c(-2, -1, 0, 1, 2),   vFlagOrder = c(2, -2, 1, -1, 0),   nAccrualThreshold = NULL,   strAccrualMetric = NULL )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag_Poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag_Poisson — Flag_Poisson","text":"dfAnalyzed data.frame flags added. strColumn character Name column use thresholding. Default: \"Score\" vThreshold numeric Vector numeric values representing threshold values. Default c(-3,-2,2,3) typical z-scores. vFlag numeric Vector flag values. must one item Flag thresholds - length(vThreshold)+1 == length(vFlagValues). Default c(-2,-1,0,1,2), typical z-scores. vFlagOrder numeric Vector ordered flag values. Output data.frame sorted based flag column using order provided. NULL (values match vFlag) leave data unsorted. Must identical values vFlag. Default c(2,-2,1,-1,0) puts largest z-score outliers first data set. nAccrualThreshold numeric Specifies minimum value required return score calculate flag. Default: NULL strAccrualMetric character Specifies Metric apply nAccrualThreshold order determine validity flag. Options \"Numerator\", \"Denominator\" \"Difference\". \"Difference\" specified, threshold based difference Denominator Numerator given Group. Default: NULL.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Flag_Poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flag_Poisson — Flag_Poisson","text":"Alias Flag()","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/GetStrFunctionIfNamespaced.html","id":null,"dir":"Reference","previous_headings":"","what":"GetFunctionIfNamespaced — GetStrFunctionIfNamespaced","title":"GetFunctionIfNamespaced — GetStrFunctionIfNamespaced","text":"function looks see strFunction namespaced looks allowing .call run step process correctly. return function.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/GetStrFunctionIfNamespaced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetFunctionIfNamespaced — GetStrFunctionIfNamespaced","text":"","code":"GetStrFunctionIfNamespaced(strFunction)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/GetStrFunctionIfNamespaced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetFunctionIfNamespaced — GetStrFunctionIfNamespaced","text":"strFunction function called","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/GetStrFunctionIfNamespaced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetFunctionIfNamespaced — GetStrFunctionIfNamespaced","text":"","code":"fn <- GetStrFunctionIfNamespaced(\"dplyr::glimpse\") fn(head(Theoph)) #> Rows: 6 #> Columns: 5 #> $ Subject <ord> 1, 1, 1, 1, 1, 1 #> $ Wt      <dbl> 79.6, 79.6, 79.6, 79.6, 79.6, 79.6 #> $ Dose    <dbl> 4.02, 4.02, 4.02, 4.02, 4.02, 4.02 #> $ Time    <dbl> 0.00, 0.25, 0.57, 1.12, 2.02, 3.82 #> $ conc    <dbl> 0.74, 2.84, 6.57, 10.50, 9.66, 8.58"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Input_Rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Input_Rate — Input_Rate","title":"Input_Rate — Input_Rate","text":"Calculate subject level rate numerator denominator data function takes list data frames including dfSUBJ, dfNumerator, dfDenominator, calculates subject level rate based specified numerator denominator methods (either \"Count\" \"Sum\"). method \"Count\", function simply counts number rows provided data frame. numerator method \"Sum\", function takes sum values specified column (strNumeratorCol strDenominatorCol). function returns data frame calculated input rate subject. data requirements function follows: dfSubjects: data frame columns SubjectID relevant subject information dfNumerator: data frame column SubjectID strNumeratorCol strNumeratorMethod \"Sum\" dfDenominator: data frame column SubjectID strDenominatorCol strDenominatorMethod \"Sum\" columns dropped output data frame. Note values subject found dfNumerator/dfDenominator numerator denominator values filled 0 output data frame.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Input_Rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input_Rate — Input_Rate","text":"","code":"Input_Rate(   dfSubjects,   dfNumerator,   dfDenominator,   strGroupCol = \"GroupID\",   strGroupLevel = NULL,   strSubjectCol = \"SubjectID\",   strNumeratorMethod = c(\"Count\", \"Sum\"),   strDenominatorMethod = c(\"Count\", \"Sum\"),   strNumeratorCol = NULL,   strDenominatorCol = NULL )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Input_Rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input_Rate — Input_Rate","text":"dfSubjects data.frame columns SubjectID relevant subject information dfNumerator data.frame column SubjectID strNumeratorCol strNumeratorMethod \"Sum\" dfDenominator data.frame column SubjectID strDenominatorCol strDenominatorMethod \"Sum\" strGroupCol character Column name dfSubjects use grouping. Default: \"GroupID\" strGroupLevel character value group level. Default: NULL parsed strGroupCol strSubjectCol character Column name dfSubjects use subject ID. Default: \"SubjectID\" strNumeratorMethod character Method calculate numerator. Default: \"Count\" strDenominatorMethod character Method calculate denominator. Default: \"Count\" strNumeratorCol character Column name dfNumerator use numerator calculation. Default: NULL strDenominatorCol character Column name dfDenominator use denominator calculation. Default: NULL","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Input_Rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Input_Rate — Input_Rate","text":"data.frame following specification:","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Input_Rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Input_Rate — Input_Rate","text":"","code":"# Run for AE KRI dfInput <- Input_Rate(   dfSubjects = gsm.core::lSource$Raw_SUBJ,   dfNumerator = gsm.core::lSource$Raw_AE,   dfDenominator = gsm.core::lSource$Raw_SUBJ,   strSubjectCol = \"subjid\",   strGroupCol = \"invid\",   strGroupLevel = \"Site\",   strNumeratorMethod = \"Count\",   strDenominatorMethod = \"Sum\",   strDenominatorCol = \"timeontreatment\" )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/LogMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom logging function that wraps cli messaging — LogMessage","title":"Custom logging function that wraps cli messaging — LogMessage","text":"Custom logging function wraps cli messaging","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/LogMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom logging function that wraps cli messaging — LogMessage","text":"","code":"LogMessage(level, message, cli_detail = NULL, .envir = parent.frame())"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/LogMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom logging function that wraps cli messaging — LogMessage","text":"level logger levels message message display; may contain glue-style placeholders cli_detail cli style alerts detail info .envir environment glue expressions","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/MakeWideGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to compile ","title":"Helper function to compile ","text":"Used convert metadata dictionary (dfGroups) wide format data frame use charts reports.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/MakeWideGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to compile ","text":"","code":"MakeWideGroups(dfGroups, strGroupLevel)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/MakeWideGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to compile ","text":"dfGroups data.frame Group-level metadata dictionary. Created passing CTMS site study data gsm.mapping::MakeLongMeta(). Expected columns: GroupID, GroupLevel, Param, Value. strGroupLevel string specifying group level; used filter dfGroups$GroupLevel.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/MakeWideGroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to compile ","text":"long format data frame.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/MakeWideGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to compile ","text":"","code":"MakeWideGroups(reportingGroups, \"Site\") #> # A tibble: 150 × 12 #>    GroupID GroupLevel studyid   invid InvestigatorFirstName InvestigatorLastName #>    <chr>   <chr>      <chr>     <chr> <chr>                 <chr>                #>  1 0X9360  Site       AA-AA-00… 0X93… Fred                  Smith                #>  2 0X958   Site       AA-AA-00… 0X958 Fred                  Deer                 #>  3 0X2170  Site       AA-AA-00… 0X21… John                  Deer                 #>  4 0X5895  Site       AA-AA-00… 0X58… Joanne                Deer                 #>  5 0X1257  Site       AA-AA-00… 0X12… Joanne                Doe                  #>  6 0X8799  Site       AA-AA-00… 0X87… John                  Doe                  #>  7 0X4590  Site       AA-AA-00… 0X45… John                  Smith                #>  8 0X4629  Site       AA-AA-00… 0X46… John                  Doe                  #>  9 0X9346  Site       AA-AA-00… 0X93… John                  Doe                  #> 10 0X2901  Site       AA-AA-00… 0X29… Joanne                Doe                  #> # ℹ 140 more rows #> # ℹ 6 more variables: site_status <chr>, City <chr>, State <chr>, #> #   Country <chr>, ParticipantCount <chr>, SiteCount <chr>"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/MakeWorkflowList.html","id":null,"dir":"Reference","previous_headings":"","what":"Load workflows from a package/directory. — MakeWorkflowList","title":"Load workflows from a package/directory. — MakeWorkflowList","text":"MakeWorkflowList() utility function creates list workflows use KRI pipelines.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/MakeWorkflowList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load workflows from a package/directory. — MakeWorkflowList","text":"","code":"MakeWorkflowList(   strNames = NULL,   strPath = \"workflow\",   strPackage = NULL,   bExact = FALSE,   bRecursive = TRUE )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/MakeWorkflowList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load workflows from a package/directory. — MakeWorkflowList","text":"strNames array character List workflows include. NULL (default) includes workflows specified locations. strPath character location workflow YAML files. NULL (default), function look /inst/workflow folder. strPackage character package name workflow YAML files located. NULL, package use absolute path. bExact logical strName matches exact? false, partial matches included. Default FALSE. bRecursive logical Find files nested folders? Default TRUE","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/MakeWorkflowList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load workflows from a package/directory. — MakeWorkflowList","text":"list list workflows workflow parameter metadata.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/MakeWorkflowList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load workflows from a package/directory. — MakeWorkflowList","text":"","code":"# get specific workflow files workflow <- MakeWorkflowList(strPath = \"example_workflow/1_mappings\",                              strPackage = \"gsm.core\")"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/ParseThreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a string into a numeric vector — ParseThreshold","title":"Parse a string into a numeric vector — ParseThreshold","text":"function takes comma-separated string parses numeric vector. checks values string numeric returns parsed vector. value numeric, throws error.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/ParseThreshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a string into a numeric vector — ParseThreshold","text":"","code":"ParseThreshold(strThreshold, bSort = TRUE)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/ParseThreshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a string into a numeric vector — ParseThreshold","text":"strThreshold character comma-separated string numeric values. bSort logical Sort thresholds ascending order? Default: TRUE.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/ParseThreshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a string into a numeric vector — ParseThreshold","text":"numeric vector containing parsed values.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/ParseThreshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a string into a numeric vector — ParseThreshold","text":"","code":"# standard thresholds ParseThreshold(\"-3,-2,2,3\") #> Parsed -3,-2,2,3 to numeric vector: -3, -2, 2, 3 #> [1] -3 -2  2  3  # by default thresholds will be sorted in ascending order ParseThreshold(\"3,2,-2,-3\") #> Parsed 3,2,-2,-3 to numeric vector: 3, 2, -2, -3 #> [1] -3 -2  2  3  # optionally disable the sort ParseThreshold(\"0.9,0.85\", bSort = FALSE) #> Parsed 0.9,0.85 to numeric vector: 0.9, 0.85 #> [1] 0.90 0.85"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a SQL query on a data frame or DuckDB table — RunQuery","title":"Run a SQL query on a data frame or DuckDB table — RunQuery","text":"RunQuery executes SQL query data frame DuckDB lazy table, allowing dynamic use local database-backed data. DuckDB connection passed df, operates existing connection. Otherwise, creates temporary DuckDB table provided data frame SQL processing. SQL query include placeholder df indicate primary data source (df) referenced.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a SQL query on a data frame or DuckDB table — RunQuery","text":"","code":"RunQuery(strQuery, df, bUseSchema = FALSE, lColumnMapping = NULL)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a SQL query on a data frame or DuckDB table — RunQuery","text":"strQuery character SQL query run, containing placeholders \"df\". df data.frame tbl_dbi data frame DuckDB lazy table use SQL query. bUseSchema boolean use schema enforce data types. Defaults FALSE. lColumnMapping list namesd list column specifications single data.frame. Required bUseSchema TRUE.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a SQL query on a data frame or DuckDB table — RunQuery","text":"data.frame containing results SQL query.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a SQL query on a data frame or DuckDB table — RunQuery","text":"","code":"df <- data.frame(   Name = c(\"John\", \"Jane\", \"Bob\"),   Age = c(25, 30, 35),   Salary = c(50000, 60000, 70000) ) query <- \"SELECT * FROM df WHERE AGE > 30\"  result <- RunQuery(query, df) #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 1 rows returned. #> Disconnected from temporary DuckDB connection."},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunStep.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a single step in a workflow. — RunStep","title":"Run a single step in a workflow. — RunStep","text":"Runs single step assessment workflow. function called RunWorkflow step workflow. prepares parameters function call calls function specified lStep$name prepared parameters. primary utility function provide prioritized parser function parameterization. Parameters specified named list lStep$params, element key-value pair parsed passed specified function set parameter names/values. Parameter values specified scalar strings. values pulled lMeta lData possible. matching lData lMeta objects found, parameter values passed strings. Note parsing vectorized parameters supported time; passed directly character vectors. pass vector list, recommend saving object lData. Full prioritization parsing parameters : single parameter value equal \"lMeta\", full lMeta object passed function (given paramName). single parameter value equal \"lData\", full lData object passed function. single parameter value equal \"lSpec\", full lSpec object passed function. single parameter value found names(lMeta), property pulled lMeta (e.g. lMeta${paramVal}) passed function. single parameter value found names(lData), property pulled lData (e.g. lData${paramVal}) passed function. Otherwise single parameter value passed function string. parameter value vector, vector passed function vector strings.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunStep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a single step in a workflow. — RunStep","text":"","code":"RunStep(lStep, lData, lMeta, lSpec = NULL)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunStep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a single step in a workflow. — RunStep","text":"lStep list single workflow step (typically pulled lWorkflow$steps). include name function run (lStep$name), name object function result saved (lStep$output) configurable parameters (lStep$params) () lData list named list domain level data frames. lMeta list named list meta data. lSpec list data specification containing required columns. See vignette(\"gsmExtensions\", package = \"gsm.core\").","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunStep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a single step in a workflow. — RunStep","text":"list containing results lStep$name function call contain .$checks parameter results is_mapping_vald domain lStep$inputs.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunStep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a single step in a workflow. — RunStep","text":"","code":"wf_mapping <- MakeWorkflowList(strNames = c(\"AE\", \"SUBJ\"),                                strPath = \"example_workflow/1_mappings\",                                strPackage = \"gsm.core\",                                bExact = TRUE ) lWorkflow <- MakeWorkflowList(strPath = \"example_workflow/2_metrics\",                               strNames = c(\"kri0001\", \"kri0002\"),                               strPackage = \"gsm.core\") lStep <- lWorkflow[[\"kri0001\"]][[\"steps\"]][[1]] lMeta <- lWorkflow[[\"kri0001\"]][[\"meta\"]]  lRaw <- list(           Raw_SUBJ = gsm.core::lSource$Raw_SUBJ,           Raw_AE = gsm.core::lSource$Raw_AE)  mapped <- RunWorkflows(wf_mapping, lRaw) #>  #> ── Running 2 Workflows ───────────────────────────────────────────────────────── #>  #> ── Initializing `Mapped_AE` Workflow ─────────────────────────────────────────── #>  #> ── Checking data against spec  #> → All 1 data.frame(s) in the spec are present in the data: Raw_AE #> → All specified columns in Raw_AE are in the expected format #> → All 2 specified column(s) in the spec are present in the data: Raw_AE$subjid, Raw_AE$aeser #>  #> ── Workflow Step 1 of 1: `=` ── #>  #> ── Evaluating 2 parameter(s) for `=`  #> ℹ lhs = Mapped_AE: No matching data found. Passing 'Mapped_AE' as a string. #> ✔ rhs = Raw_AE: Passing lData$Raw_AE. #>  #> ── Calling `=`  #>  #> ── 3000x7 data.frame saved as `lData$Mapped_AE`.  #>  #> ── Returning results from final step: 3000x7 data.frame`. ── #>  #> ── Completed `Mapped_AE` Workflow ────────────────────────────────────────────── #>  #> ── Initializing `Mapped_SUBJ` Workflow ───────────────────────────────────────── #>  #> ── Checking data against spec  #> → All 1 data.frame(s) in the spec are present in the data: Raw_SUBJ #> → All specified columns in Raw_SUBJ are in the expected format #> → All 7 specified column(s) in the spec are present in the data: Raw_SUBJ$studyid, Raw_SUBJ$invid, Raw_SUBJ$country, Raw_SUBJ$subjid, Raw_SUBJ$subject_nsv, Raw_SUBJ$enrollyn, Raw_SUBJ$timeonstudy #>  #> ── Workflow Step 1 of 1: `gsm.core::RunQuery` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::RunQuery`  #> ✔ df = Raw_SUBJ: Passing lData$Raw_SUBJ. #> ℹ strQuery = SELECT * FROM df WHERE enrollyn == 'Y': No matching data found. Passing 'SELECT * FROM df WHERE enrollyn == 'Y'' as a string. #>  #> ── Calling `gsm.core::RunQuery`  #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 746 rows returned. #> Disconnected from temporary DuckDB connection. #>  #> ── 746x14 data.frame saved as `lData$Mapped_SUBJ`.  #>  #> ── Returning results from final step: 746x14 data.frame`. ── #>  #> ── Completed `Mapped_SUBJ` Workflow ──────────────────────────────────────────── ae_step <- RunStep(lStep = lStep, lData = lMapped, lMeta = lMeta) #>  #> ── Evaluating 1 parameter(s) for `gsm.core::ParseThreshold`  #> ✔ strThreshold = Threshold: Passing lMeta$Threshold. #>  #> ── Calling `gsm.core::ParseThreshold`  #> Parsed -2,-1,2,3 to numeric vector: -2, -1, 2, 3"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunWorkflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a workflow via it's YAML specification. — RunWorkflow","title":"Run a workflow via it's YAML specification. — RunWorkflow","text":"Attempts run single assessment (lWorkflow) using shared data (lData) metadata (lMapping). Calls RunStep item lWorkflow$workflow saves results lWorkflow.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunWorkflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a workflow via it's YAML specification. — RunWorkflow","text":"","code":"RunWorkflow(   lWorkflow,   lData = NULL,   lConfig = NULL,   bReturnResult = TRUE,   bKeepInputData = TRUE )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunWorkflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a workflow via it's YAML specification. — RunWorkflow","text":"lWorkflow list named list metadata defining workflow run. lData list named list domain-level data frames. lConfig list configuration object two methods: LoadData: function loads data specified lWorkflow$spec. SaveData: function saves data returned last step lWorkflow$steps. bReturnResult boolean result last step (lResults) returned? false, full workflow (including lResults) returned. Default TRUE. bKeepInputData boolean input data included lData workflow run? relevant bReturnResult FALSE. Default TRUE.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunWorkflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a workflow via it's YAML specification. — RunWorkflow","text":"Object containing results workflow's last step (bLastResult TRUE) full workflow object (bReturnResults TRUE) full workflow object (bReturnResults FALSE). list contains just lData bReturnData TRUE, otherwise returns full lWorkflow object.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunWorkflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a workflow via it's YAML specification. — RunWorkflow","text":"","code":"# ---- # Workflow using in-memory data.  # Generate mapped input data to metric workflow. lMappingWorkflows <- MakeWorkflowList(   strNames = c(\"AE\", \"SUBJ\"),   strPath = \"example_workflow/1_mappings\",   strPackage = \"gsm.core\",   bExact = TRUE ) lRawData <- list(           Raw_SUBJ = gsm.core::lSource$Raw_SUBJ,           Raw_AE = gsm.core::lSource$Raw_AE)  lMappedData <- RunWorkflows(   lMappingWorkflows,   lRawData ) #>  #> ── Running 2 Workflows ───────────────────────────────────────────────────────── #>  #> ── Initializing `Mapped_AE` Workflow ─────────────────────────────────────────── #>  #> ── Checking data against spec  #> → All 1 data.frame(s) in the spec are present in the data: Raw_AE #> → All specified columns in Raw_AE are in the expected format #> → All 2 specified column(s) in the spec are present in the data: Raw_AE$subjid, Raw_AE$aeser #>  #> ── Workflow Step 1 of 1: `=` ── #>  #> ── Evaluating 2 parameter(s) for `=`  #> ℹ lhs = Mapped_AE: No matching data found. Passing 'Mapped_AE' as a string. #> ✔ rhs = Raw_AE: Passing lData$Raw_AE. #>  #> ── Calling `=`  #>  #> ── 3000x7 data.frame saved as `lData$Mapped_AE`.  #>  #> ── Returning results from final step: 3000x7 data.frame`. ── #>  #> ── Completed `Mapped_AE` Workflow ────────────────────────────────────────────── #>  #> ── Initializing `Mapped_SUBJ` Workflow ───────────────────────────────────────── #>  #> ── Checking data against spec  #> → All 1 data.frame(s) in the spec are present in the data: Raw_SUBJ #> → All specified columns in Raw_SUBJ are in the expected format #> → All 7 specified column(s) in the spec are present in the data: Raw_SUBJ$studyid, Raw_SUBJ$invid, Raw_SUBJ$country, Raw_SUBJ$subjid, Raw_SUBJ$subject_nsv, Raw_SUBJ$enrollyn, Raw_SUBJ$timeonstudy #>  #> ── Workflow Step 1 of 1: `gsm.core::RunQuery` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::RunQuery`  #> ✔ df = Raw_SUBJ: Passing lData$Raw_SUBJ. #> ℹ strQuery = SELECT * FROM df WHERE enrollyn == 'Y': No matching data found. Passing 'SELECT * FROM df WHERE enrollyn == 'Y'' as a string. #>  #> ── Calling `gsm.core::RunQuery`  #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 746 rows returned. #> Disconnected from temporary DuckDB connection. #>  #> ── 746x14 data.frame saved as `lData$Mapped_SUBJ`.  #>  #> ── Returning results from final step: 746x14 data.frame`. ── #>  #> ── Completed `Mapped_SUBJ` Workflow ────────────────────────────────────────────  # Run the metric workflow. lMetricWorkflow <- MakeWorkflowList(strPath = \"example_workflow/2_metrics\",                               strNames = c(\"kri0001\", \"kri0002\"),                               strPackage = \"gsm.core\")$kri0001 lMetricOutput <- RunWorkflow(   lMetricWorkflow,   lMappedData ) #>  #> ── Initializing `Analysis_kri0001` Workflow ──────────────────────────────────── #>  #> ── Checking data against spec  #> → All 2 data.frame(s) in the spec are present in the data: Mapped_AE, Mapped_SUBJ #> → All specified columns in Mapped_AE are in the expected format #> → All specified columns in Mapped_SUBJ are in the expected format #> → All 4 specified column(s) in the spec are present in the data: Mapped_AE$subjid, Mapped_SUBJ$subjid, Mapped_SUBJ$invid, Mapped_SUBJ$timeonstudy #>  #> ── Workflow Step 1 of 7: `gsm.core::ParseThreshold` ── #>  #> ── Evaluating 1 parameter(s) for `gsm.core::ParseThreshold`  #> ✔ strThreshold = Threshold: Passing lMeta$Threshold. #>  #> ── Calling `gsm.core::ParseThreshold`  #> Parsed -2,-1,2,3 to numeric vector: -2, -1, 2, 3 #>  #> ── double of length 4 saved as `lData$vThreshold`.  #>  #> ── Workflow Step 2 of 7: `gsm.core::Input_Rate` ── #>  #> ── Evaluating 9 parameter(s) for `gsm.core::Input_Rate`  #> ✔ dfSubjects = Mapped_SUBJ: Passing lData$Mapped_SUBJ. #> ✔ dfNumerator = Mapped_AE: Passing lData$Mapped_AE. #> ✔ dfDenominator = Mapped_SUBJ: Passing lData$Mapped_SUBJ. #> ℹ strSubjectCol = subjid: No matching data found. Passing 'subjid' as a string. #> ℹ strGroupCol = invid: No matching data found. Passing 'invid' as a string. #> ✔ strGroupLevel = GroupLevel: Passing lMeta$GroupLevel. #> ℹ strNumeratorMethod = Count: No matching data found. Passing 'Count' as a string. #> ℹ strDenominatorMethod = Sum: No matching data found. Passing 'Sum' as a string. #> ℹ strDenominatorCol = timeonstudy: No matching data found. Passing 'timeonstudy' as a string. #>  #> ── Calling `gsm.core::Input_Rate`  #>  #> ── 746x6 data.frame saved as `lData$Analysis_Input`.  #>  #> ── Workflow Step 3 of 7: `gsm.core::Transform_Rate` ── #>  #> ── Evaluating 1 parameter(s) for `gsm.core::Transform_Rate`  #> ✔ dfInput = Analysis_Input: Passing lData$Analysis_Input. #>  #> ── Calling `gsm.core::Transform_Rate`  #>  #> ── 149x5 data.frame saved as `lData$Analysis_Transformed`.  #>  #> ── Workflow Step 4 of 7: `gsm.core::Analyze_NormalApprox` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::Analyze_NormalApprox`  #> ✔ dfTransformed = Analysis_Transformed: Passing lData$Analysis_Transformed. #> ✔ strType = AnalysisType: Passing lMeta$AnalysisType. #>  #> ── Calling `gsm.core::Analyze_NormalApprox`  #> `OverallMetric`, `Factor`, and `Score` columns created from normal #> approximation. #>  #> ── 149x8 data.frame saved as `lData$Analysis_Analyzed`.  #>  #> ── Workflow Step 5 of 7: `gsm.core::Flag` ── #>  #> ── Evaluating 4 parameter(s) for `gsm.core::Flag`  #> ✔ dfAnalyzed = Analysis_Analyzed: Passing lData$Analysis_Analyzed. #> ✔ vThreshold = vThreshold: Passing lData$vThreshold. #> ✔ nAccrualThreshold = AccrualThreshold: Passing lMeta$AccrualThreshold. #> ✔ strAccrualMetric = AccrualMetric: Passing lMeta$AccrualMetric. #>  #> ── Calling `gsm.core::Flag`  #> ℹ 16 Group(s) have insufficient sample size due to KRI denominator less than 30: 0X984, 0X9532, 0X8517, 0X6600, 0X7988, 0X709, 0X8649, 0X617, 0X184, 0X5406, 0X1705, 0X7683, 0X2111, 0X2312, 0X5357, 0X8948 #> These group(s) will not have KRI score and flag summarized. #> ℹ Sorted dfFlagged using custom Flag order: 2.Sorted dfFlagged using custom Flag order: -2.Sorted dfFlagged using custom Flag order: 1.Sorted dfFlagged using custom Flag order: -1.Sorted dfFlagged using custom Flag order: 0. #>  #> ── 149x9 data.frame saved as `lData$Analysis_Flagged`.  #>  #> ── Workflow Step 6 of 7: `gsm.core::Summarize` ── #>  #> ── Evaluating 1 parameter(s) for `gsm.core::Summarize`  #> ✔ dfFlagged = Analysis_Flagged: Passing lData$Analysis_Flagged. #>  #> ── Calling `gsm.core::Summarize`  #>  #> ── 149x7 data.frame saved as `lData$Analysis_Summary`.  #>  #> ── Workflow Step 7 of 7: `list` ── #>  #> ── Evaluating 6 parameter(s) for `list`  #> ✔ ID = ID: Passing lMeta$ID. #> ✔ Analysis_Input = Analysis_Input: Passing lData$Analysis_Input. #> ✔ Analysis_Transformed = Analysis_Transformed: Passing lData$Analysis_Transformed. #> ✔ Analysis_Analyzed = Analysis_Analyzed: Passing lData$Analysis_Analyzed. #> ✔ Analysis_Flagged = Analysis_Flagged: Passing lData$Analysis_Flagged. #> ✔ Analysis_Summary = Analysis_Summary: Passing lData$Analysis_Summary. #>  #> ── Calling `list`  #>  #> ── list of length 6 saved as `lData$lAnalysis`.  #>  #> ── Returning results from final step: list of length 6`. ── #>  #> ── Completed `Analysis_kri0001` Workflow ─────────────────────────────────────── if (FALSE) { # \\dontrun{ # ---- # Workflow using data read/write functions.  # Define a function that loads data. LoadData <- function(lWorkflow, lConfig, lData) {   lData <- lData   purrr::imap(     lWorkflow$spec,     ~ {       input <- lConfig$Domains[[.y]]        if (is.function(input)) {         data <- input()       } else if (is.character(input)) {         data <- read.csv(input)       }        lData[[.y]] <- ApplySpec(data, .x)     }   )   return(lData) }  # Define a function that saves data to .csv. SaveData <- function(lWorkflow, lConfig) {   domain <- paste0(lWorkflow$meta$Type, \"_\", lWorkflow$meta$ID)   if (domain %in% names(lConfig$Domains)) {     output <- lConfig$Domains[[domain]]      write.csv(       lWorkflow$lResult,       output     )   } }  # Define a configuration object with LoadData/SaveData functions and a list of named data sources. lConfig <- list(   LoadData = LoadData,   SaveData = SaveData,   Domains = c(     Raw_AE = function() {        gsm.core::lSource$Raw_AE     },     Raw_SUBJ = function() {        gsm.core::lSource$Raw_SUBJ     },     Mapped_AE = file.path(tempdir(), \"mapped-ae.csv\"),     Mapped_SUBJ = file.path(tempdir(), \"mapped-subj.csv\")   ) )  # Generate mapped input data to metric workflow. lMappingWorkflows <- MakeWorkflowList(strNames = c(\"AE\", \"SUBJ\"),                                strPath = \"example_workflow/1_mappings\",                                strPackage = \"gsm.core\",                                bExact = TRUE )  lMappedData <- RunWorkflows(   lMappingWorkflows,   lConfig = lConfig )  # Run the metric workflow. lMetricWorkflow <- MakeWorkflowList(strPath = \"example_workflow/2_metrics\",                               strNames = c(\"kri0001\", \"kri0002\"),                               strPackage = \"gsm.core\")$kri0001 lMetricOutput <- RunWorkflow(   lMetricWorkflow,   lConfig = lConfig ) } # }"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunWorkflows.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function to easily run multiple workflows — RunWorkflows","title":"Convenience function to easily run multiple workflows — RunWorkflows","text":"function takes list workflows list data input.  runs workflow returns results named list names list correspond workflow ID ($meta$ID). Workflows run order provided lWorkflows. results workflow passed inputs (along lData) later workflows.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunWorkflows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function to easily run multiple workflows — RunWorkflows","text":"","code":"RunWorkflows(   lWorkflows,   lData = NULL,   lConfig = NULL,   bKeepInputData = FALSE,   bReturnResult = TRUE,   strResultNames = c(\"Type\", \"ID\") )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunWorkflows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function to easily run multiple workflows — RunWorkflows","text":"lWorkflows list named list metadata defining workflow run. lData list named list domain-level data frames. lConfig list configuration object two methods: LoadData: function loads data specified lWorkflow$spec. SaveData: function saves data returned last step lWorkflow$steps. bKeepInputData boolean input data included lData workflow run? relevant bReturnResult FALSE. Default TRUE. bReturnResult boolean result last step (lResults) returned? false, full workflow (including lResults) returned. Default TRUE. strResultNames string vector length two, describes meta fields used name output.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/RunWorkflows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience function to easily run multiple workflows — RunWorkflows","text":"named list results RunWorkflow(), names correspond names workflow ID","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/SetLogger.html","id":null,"dir":"Reference","previous_headings":"","what":"set the default package logger — SetLogger","title":"set the default package logger — SetLogger","text":"set default package logger","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/SetLogger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set the default package logger — SetLogger","text":"","code":"SetLogger(logger)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/SetLogger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set the default package logger — SetLogger","text":"logger log4r logger","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Summarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Summary Data Frame — Summarize","title":"Make Summary Data Frame — Summarize","text":"Create concise summary assessment results easy aggregate across assessments","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Summarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Summary Data Frame — Summarize","text":"","code":"Summarize(dfFlagged, nMinDenominator = lifecycle::deprecated())"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Summarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Summary Data Frame — Summarize","text":"dfFlagged data.frame format produced Flag(). nMinDenominator numeric Specifies minimum denominator required return score calculate flag. Default: NULL","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Summarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Summary Data Frame — Summarize","text":"Simplified finding data.frame columns GroupID, GroupType, Metric, Score, Flag associated workflow.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Summarize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make Summary Data Frame — Summarize","text":"Summarize supports input data (dfFlagged) Flag function.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Summarize.html","id":"data-specification","dir":"Reference","previous_headings":"","what":"Data Specification","title":"Make Summary Data Frame — Summarize","text":"(dfFlagged) following required columns: GroupID - Group ID GroupLevel - Group Type Flag - Flagging value -1, 0, 1 Score - Column analysis results.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Summarize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Summary Data Frame — Summarize","text":"","code":"dfTransformed <- Transform_Rate(analyticsInput) #> Warning: 1 values of [ GroupID ] with a [ Denominator ] value of 0 removed. dfAnalyzed <- Analyze_NormalApprox(dfTransformed) #> `OverallMetric`, `Factor`, and `Score` columns created from normal #> approximation. dfFlagged <- Flag(dfAnalyzed) #> ℹ Sorted dfFlagged using custom Flag order: 2.Sorted dfFlagged using custom Flag order: -2.Sorted dfFlagged using custom Flag order: 1.Sorted dfFlagged using custom Flag order: -1.Sorted dfFlagged using custom Flag order: 0. dfSummary <- Summarize(dfFlagged)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Count.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Count — Transform_Count","title":"Transform Count — Transform_Count","text":"Convert input data format needed input format derive KRI Assessment. Calculate site-level count.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Count — Transform_Count","text":"","code":"Transform_Count(dfInput, strCountCol, strGroupCol = \"GroupID\")"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Count — Transform_Count","text":"dfInput data.frame Input data one record per subject. Created passing Raw+ data Input_Rate(). Expected columns: GroupID, GroupLevel, Numerator, Denominator /columns specified strCountCol strGroupCol. strCountCol Required. Numerical logical. Column counted. strGroupCol character Name column grouping variable. Default: \"GroupID\"","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Count — Transform_Count","text":"data.frame one row per site columns GroupID, TotalCount, Metric.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Count — Transform_Count","text":"function transforms data prepare analysis step. currently sourced Consent IE Assessments.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Count.html","id":"data-specification","dir":"Reference","previous_headings":"","what":"Data Specification","title":"Transform Count — Transform_Count","text":"(dfInput) must include columns specified strCountCol strGroupCol. Required columns include: GroupID - Group ID GroupLevel - Group Type Numerator - Number events interest; actual name column specified parameter strNumeratorCol Denominator - Number days treatment; actual name column specified parameter strDenominatorCol input data one rows per site. Transform_Count() sums strCountCol TotalCount site. Metric set TotalCount used downstream workflow.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Count — Transform_Count","text":"","code":"dfTransformed <- Transform_Count(analyticsInput, strCountCol = \"Numerator\")"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Rate — Transform_Rate","title":"Transform Rate — Transform_Rate","text":"Convert input data format needed input format derive KRI Assessment. Calculate site-level rate.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Rate — Transform_Rate","text":"","code":"Transform_Rate(   dfInput,   strNumeratorCol = \"Numerator\",   strDenominatorCol = \"Denominator\" )"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Rate — Transform_Rate","text":"dfInput data.frame Input data one record per subject. Created passing Raw+ data Input_Rate(). Expected columns: GroupID, GroupLevel, Numerator, Denominator /columns specified strCountCol strGroupCol. strNumeratorCol string Column counted. Defaults \"Numerator\". strDenominatorCol string Column name numerical Exposure column. Defaults \"Denominator\".","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Rate — Transform_Rate","text":"data.frame one row per site columns GroupID, GroupLevel, Numerator, Denominator, Metric.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Rate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Rate — Transform_Rate","text":"function transforms data prepare analysis step. currently sourced Adverse Event, Disposition, Labs, Protocol Deviations Assessments.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Rate.html","id":"data-specification","dir":"Reference","previous_headings":"","what":"Data Specification","title":"Transform Rate — Transform_Rate","text":"(dfInput) must include columns specified strNumeratorCol strDenominatorCol. Required columns include: GroupID - Group ID GroupLevel - Group Type Numerator - Number events interest; actual name column specified parameter strNumeratorCol Denominator - Number days treatment; actual name column specified parameter strDenominatorCol","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/Transform_Rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Rate — Transform_Rate","text":"","code":"dfTransformed <- Transform_Rate(   analyticsInput,   strNumeratorCol = \"Numerator\",   strDenominatorCol = \"Denominator\" ) #> Warning: 1 values of [ GroupID ] with a [ Denominator ] value of 0 removed."},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/analyticsInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"analyticsInput Dataset — analyticsInput","text":"","code":"analyticsInput"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/analyticsInput.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"analyticsInput Dataset — analyticsInput","text":"data frame 767 rows 6 columns: SubjectID unique subject identifier GroupID grouping variable GroupLevel level grouping variable Numerator number flags group Denominator total subjects group Metric calculated rate/metric value","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/analyticsInput.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"analyticsInput Dataset — analyticsInput","text":"Generated analyticsInput.csv dataset gsm.core package.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/analyticsSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"analyticsSummary Dataset — analyticsSummary","text":"","code":"analyticsSummary"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/analyticsSummary.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"analyticsSummary Dataset — analyticsSummary","text":"data frame 143 rows 7 columns: GroupID grouping variable GroupLevel level grouping variable Numerator number flags group Denominator total subjects group Metric calculated rate/metric value Score statistical score Flag ordinal flag applied","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/analyticsSummary.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"analyticsSummary Dataset — analyticsSummary","text":"Generated analyticsSummary.csv dataset gsm.core package.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/cli_fmt.html","id":null,"dir":"Reference","previous_headings":"","what":"cli style console appender for gsm — cli_fmt","title":"cli style console appender for gsm — cli_fmt","text":"cli style console appender gsm","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/cli_fmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cli style console appender for gsm — cli_fmt","text":"","code":"cli_fmt(level, ...)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/cli_fmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cli style console appender for gsm — cli_fmt","text":"level warning level maps log4r ... contain message cli_detail","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/gsm.core-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gsm.core: Good Statistical Monitoring — gsm.core-package","title":"gsm.core: Good Statistical Monitoring — gsm.core-package","text":"Good Statistical Monitoring 'gsm' suite R packages provides framework statistical data monitoring. 'gsm.core' provides analytics framework constructing metrics, utility functions run workflows.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/gsm.core-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gsm.core: Good Statistical Monitoring — gsm.core-package","text":"Maintainer: George Wu george.wu@gilead.com Authors: Jeremy Wildfire jwildfire@gmail.com Spencer Childress spencer.childress@gilead.com (ORCID) Laura Maxwell laura.maxwell@atorusresearch.com Jacob Anderson jacob.anderson@atorusresearch.com Jon Harmon jon.harmon@atorusresearch.com Zelos Zhu zelos.zhu@atorusresearch.com Matt Roumaya matthewroumaya@gmail.com (ORCID) Nathan Kosiba Nathan.Kosiba@atorusresearch.com Douglas Sanders Li Ge Zhongkai Wang zhongkai.wang6@gilead.com (ORCID) Colleen McLaughlin colleen.mclaughlin@atorusresearch.com Chelsea Dickens chelsea.dickens@atorusresearch.com Maya Gans maya.gans@atorusresearch.com Anne Zheng anne@a2-ai.com Devin Pastoor devin@a2-ai.com contributors: Gilead Sciences [copyright holder]","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/lSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lSource Dataset — lSource","text":"","code":"lSource"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/lSource.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"lSource Dataset — lSource","text":"data frame  rows  columns: \"Raw_AE\" AE Source dataset \"Raw_COUNTRY\" Country Source dataset \"Raw_DATACHG\" DATACHG ource dataset \"Raw_DATAENT\" DATAENT Source dataset \"Raw_ENROLL\" Enroll Source dataset \"Raw_LB\" Lab Source dataset \"Raw_PD\" Protocol Deviation Source dataset \"Raw_PK\" PK Source dataset \"Raw_QUERY\" Query Source dataset \"Raw_STUDY\" Study Source dataset \"Raw_STUDCOMP\" STUDCOMP Source dataset \"Raw_SDRGCOMP\" SDRGCOMP Source dataset \"Raw_SITE\" SITE Source dataset \"Raw_SUBJ\" SUBJ Source dataset","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/lSource.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"lSource Dataset — lSource","text":"Generated data-raw/run-gsm.datasim.R.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingBounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reportingBounds Dataset — reportingBounds","text":"","code":"reportingBounds"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingBounds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"reportingBounds Dataset — reportingBounds","text":"data frame 32755 rows 8 columns: Threshold number standard deviations upper lower bounds based Denominator calculated denominator value LogDenominator calculated log denominator value Numerator calculated numerator value Metric calculated rate/metric value MetricID unique metric identifier StudyID unique study identifier SnapshotDate date snapshot","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingBounds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"reportingBounds Dataset — reportingBounds","text":"Generated reportingBounds.csv dataset gsm.core package.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingBounds_country.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reportingBounds_country Dataset — reportingBounds_country","text":"","code":"reportingBounds_country"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingBounds_country.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"reportingBounds_country Dataset — reportingBounds_country","text":"data frame 39468 rows 8 columns: Threshold number standard deviations upper lower bounds based Denominator calculated denominator value LogDenominator calculated log denominator value Numerator calculated numerator value Metric calculated rate/metric value MetricID unique metric identifier StudyID unique study identifier SnapshotDate date snapshot","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingBounds_country.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"reportingBounds_country Dataset — reportingBounds_country","text":"Generated reportingBounds_country.csv dataset gsm.core package.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reportingGroups Dataset — reportingGroups","text":"","code":"reportingGroups"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingGroups.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"reportingGroups Dataset — reportingGroups","text":"data frame 1510 rows 4 columns: GroupID grouping variable GroupLevel level grouping variable Param Parameter interest group Value Value specified Param","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingGroups.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"reportingGroups Dataset — reportingGroups","text":"Generated reportingGroups.csv dataset gsm.core package.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingGroups_country.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reportingGroups_country Dataset — reportingGroups_country","text":"","code":"reportingGroups_country"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingGroups_country.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"reportingGroups_country Dataset — reportingGroups_country","text":"data frame 28 rows 4 columns: GroupID grouping variable GroupLevel level grouping variable Param Parameter interest group Value Value specified Param","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingGroups_country.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"reportingGroups_country Dataset — reportingGroups_country","text":"Generated reportingGroups_country.csv dataset gsm.core package.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reportingMetrics Dataset — reportingMetrics","text":"","code":"reportingMetrics"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingMetrics.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"reportingMetrics Dataset — reportingMetrics","text":"data frame 13 rows 16 columns: MetricID unique metric identifier GroupLevel level grouping variable Abbreviation abbreviation metric Metric name metric Numerator data source numerator Denominator data source denominator Model model used calculate metric Score type score reported Type statistical outcome type Threshold thresholds used bounds flags AccrualThreshold minimum numerator required return score calculate flag AccrualMetric metric used apply threshold ID ID Priority Priority workflow AnalysisType analysis type Flag thresholds used vFlags argument","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingMetrics.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"reportingMetrics Dataset — reportingMetrics","text":"Generated reportingMetrics.csv dataset gsm.core package.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingMetrics_country.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reportingMetrics_country Dataset — reportingMetrics_country","text":"","code":"reportingMetrics_country"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingMetrics_country.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"reportingMetrics_country Dataset — reportingMetrics_country","text":"data frame 13 rows 16 columns: MetricID unique metric identifier GroupLevel level grouping variable Abbreviation abbreviation metric Metric name metric Numerator data source numerator Denominator data source denominator Model model used calculate metric Score type score reported Type statistical outcome type Threshold thresholds used bounds flags AccrualThreshold minimum numerator required return score calculate flag AccrualMetric metric used apply threshold ID ID Priority Priority workflow AnalysisType analysis type Flag thresholds used vFlags argument","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingMetrics_country.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"reportingMetrics_country Dataset — reportingMetrics_country","text":"Generated reportingMetrics_country.csv dataset gsm.core package.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reportingResults Dataset — reportingResults","text":"","code":"reportingResults"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingResults.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"reportingResults Dataset — reportingResults","text":"data frame 3379 rows 10 columns: GroupID grouping variable GroupLevel level grouping variable Numerator number flags group Denominator total subjects group Metric calculated rate/metric value Score statistical score Flag ordinal flag applied MetricID unique metric identifier StudyID unique study identifier SnapshotDate date snapshot","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingResults.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"reportingResults Dataset — reportingResults","text":"Generated reportingResults.csv dataset gsm.core package.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingResults_country.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reportingResults_country Dataset — reportingResults_country","text":"","code":"reportingResults_country"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingResults_country.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"reportingResults_country Dataset — reportingResults_country","text":"data frame 113 rows 10 columns: GroupID grouping variable GroupLevel level grouping variable Numerator number flags group Denominator total subjects group Metric calculated rate/metric value Score statistical score Flag ordinal flag applied MetricID unique metric identifier StudyID unique study identifier SnapshotDate date snapshot","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/reportingResults_country.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"reportingResults_country Dataset — reportingResults_country","text":"Generated reportingResults_country.csv dataset gsm.core package.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/shared-params.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters used in multiple functions — shared-params","title":"Parameters used in multiple functions — shared-params","text":"Reused parameter definitions gathered easier usage.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/shared-params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters used in multiple functions — shared-params","text":"dfMetrics data.frame Metric-specific metadata use charts reporting. Created passing lWorkflow object gsm.reporting::MakeMetric(). Expected columns: File, MetricID, Group, Abbreviation, Metric, Numerator, Denominator, Model, Score, Threshold. details see Data Model vignette: vignette(\"DataModel\", package = \"gsm.core\"). dfResults data.frame stacked summary analysis pipeline output. Created passing list results returned Summarize() gsm.reporting::BindResults(). Expected columns: GroupID, GroupLevel, Numerator, Denominator, Metric, Score, Flag, MetricID, StudyID, SnapshotDate. dfBounds data.frame Set predicted percentages/rates upper- lower-bounds across full range sample sizes/total exposure values reporting. Created passing dfResults dfMetrics gsm.reporting::MakeBounds(). Expected columns: Threshold, Denominator, Numerator, Metric, MetricID, StudyID, SnapshotDate. dfGroups data.frame Group-level metadata dictionary. Created passing CTMS site study data gsm.mapping::MakeLongMeta(). Expected columns: GroupID, GroupLevel, Param, Value. dfInput data.frame Input data one record per subject. Created passing Raw+ data Input_Rate(). Expected columns: GroupID, GroupLevel, Numerator, Denominator /columns specified strCountCol strGroupCol. lMetric list Metric-specific metadata use charts reporting. Created passing lWorkflow object gsm.reporting::MakeMetric() turing list. Expected columns: File,MetricID, Group, Abbreviation, Metric, Numerator, Denominator, Model, Score, strThreshold. details see Data Model vignette: vignette(\"DataModel\", package = \"gsm.core\"). lParamLabels list Labels parameters, parameters names, label value. bDebug logical Print debug messages? Default: FALSE.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/stop_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom stop message — stop_if","title":"Custom stop message — stop_if","text":"Custom stop message","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/stop_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom stop message — stop_if","text":"","code":"stop_if(cnd, message)"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/stop_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom stop message — stop_if","text":"cnd condition stopping message message display; may contain glue-style placeholders","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://gilead-biostats.github.io/gsm.core/dev/news/index.html","id":"gsmcore-v110","dir":"Changelog","previous_headings":"","what":"gsm.core v1.1.0","title":"gsm.core v1.1.0","text":"minor release adds PK analysis functionality updates package data use {gsm.datasim}. Specifically: - lSource package data updated include PK data - analytics reporting package data now generated using {gsm.datasim} simulated data source data. - Updates Flag() Summarize() functions make thresholds flexible. Flag_Accrual() helper function now allows thresholds based Numerator, Denominator, Difference two. details changes new features, please refer documentation pull requests linked release.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/news/index.html","id":"gsmcore-v100","dir":"Changelog","previous_headings":"","what":"gsm.core v1.0.0","title":"gsm.core v1.0.0","text":"excited announce first major release gsm.core package, serves backbone GSM pipeline. package provides analytics framework constructing metrics includes utility functions execute workflows.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/news/index.html","id":"key-features-and-updates-1-0-0","dir":"Changelog","previous_headings":"","what":"Key Features and Updates:","title":"gsm.core v1.0.0","text":"Integration gsm Packages: package designed seamlessly integrate GSM modules (e.g., gsm.mapping, gsm.reporting, gsm.kri), ensuring smooth data flow interoperability across pipeline. serves central hub analytics workflow execution.","code":""},{"path":"https://gilead-biostats.github.io/gsm.core/dev/news/index.html","id":"other-updates-1-0-0","dir":"Changelog","previous_headings":"","what":"Other Updates:","title":"gsm.core v1.0.0","text":"Bug fixes minor improvements existing utility functions. details changes new features, please refer documentation pull requests linked release.","code":""}]
